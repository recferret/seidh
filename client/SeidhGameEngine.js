// Generated by Haxe 4.3.4
(function ($hx_exports, $global) { "use strict";
$hx_exports["engine"] = $hx_exports["engine"] || {};
$hx_exports["engine"]["base"] = $hx_exports["engine"]["base"] || {};
$hx_exports["engine"]["base"]["core"] = $hx_exports["engine"]["base"]["core"] || {};
;$hx_exports["engine"]["seidh"] = $hx_exports["engine"]["seidh"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var engine_base_EntityShape = function(shape) {
	this.shape = shape;
	if(shape.rectOffsetX == 0 && shape.rectOffsetY == 0) {
		this.shape.rectOffsetX = shape.width / 2 | 0;
		this.shape.rectOffsetY = shape.height / 2 | 0;
	}
};
engine_base_EntityShape.__name__ = true;
engine_base_EntityShape.prototype = {
	toRect: function(x,y,rotation,side) {
		var sideOffset = side == 2 ? 0 : -this.shape.width + 45;
		return new engine_base_geometry_Rectangle(x + this.shape.rectOffsetX + sideOffset,y + this.shape.rectOffsetY,this.shape.width,this.shape.height,rotation);
	}
	,toJson: function() {
		return JSON.stringify({ width : this.shape.width, height : this.shape.height, rectOffsetX : this.shape.rectOffsetX, rectOffsetY : this.shape.rectOffsetY});
	}
	,__class__: engine_base_EntityShape
};
var engine_base_BaseEntity = function(struct) {
	this.x = struct.x;
	this.y = struct.y;
	this.entityType = struct.entityType;
	this.entityShape = struct.entityShape;
	this.id = struct.id;
	this.ownerId = struct.ownerId;
	this.rotation = struct.rotation;
};
engine_base_BaseEntity.__name__ = true;
engine_base_BaseEntity.prototype = {
	getBaseStruct: function() {
		var struct = { x : this.x, y : this.y, entityType : this.entityType, entityShape : this.entityShape, id : this.id, ownerId : this.ownerId, rotation : this.rotation};
		return struct;
	}
	,__class__: engine_base_BaseEntity
};
var engine_base_CharacterEntity = function(struct) {
	this.side = 2;
	engine_base_BaseEntity.call(this,struct.base);
	this.health = struct.health;
	this.movement = struct.movement;
	this.actionMain = struct.actionMain;
	this.action1 = struct.action1;
	this.action2 = struct.action2;
	this.action3 = struct.action3;
	this.actionUltimate = struct.actionUltimate;
};
engine_base_CharacterEntity.__name__ = true;
engine_base_CharacterEntity.CreateFromDynamic = function(struct) {
	return new engine_base_CharacterEntity(struct);
};
engine_base_CharacterEntity.__super__ = engine_base_BaseEntity;
engine_base_CharacterEntity.prototype = $extend(engine_base_BaseEntity.prototype,{
	toFullStruct: function() {
		var fullEntity = { base : this.getBaseStruct(), movement : this.movement, health : this.health, actionMain : this.actionMain, action1 : this.action1, action2 : this.action2, action3 : this.action3, actionUltimate : this.actionUltimate};
		return fullEntity;
	}
	,toMinStruct: function() {
		var minEntity = { id : this.id, x : this.x, y : this.y, health : this.health, side : this.side};
		return minEntity;
	}
	,__class__: engine_base_CharacterEntity
});
var engine_base_ProjectileEntity = function(struct) {
	engine_base_BaseEntity.call(this,struct.base);
	this.projectile = struct.projectile;
};
engine_base_ProjectileEntity.__name__ = true;
engine_base_ProjectileEntity.__super__ = engine_base_BaseEntity;
engine_base_ProjectileEntity.prototype = $extend(engine_base_BaseEntity.prototype,{
	__class__: engine_base_ProjectileEntity
});
var engine_base_PlayerInputCommand = function(actionType,movAngle,userId,index) {
	this.actionType = actionType;
	this.movAngle = movAngle;
	this.userId = userId;
	this.index = index;
};
engine_base_PlayerInputCommand.__name__ = true;
engine_base_PlayerInputCommand.prototype = {
	__class__: engine_base_PlayerInputCommand
};
var engine_base_InputCommandEngineWrapped = function(playerInputCommand,tick) {
	this.playerInputCommand = playerInputCommand;
	this.tick = tick;
};
engine_base_InputCommandEngineWrapped.__name__ = true;
engine_base_InputCommandEngineWrapped.prototype = {
	__class__: engine_base_InputCommandEngineWrapped
};
var engine_base_EngineConfig = function() { };
engine_base_EngineConfig.__name__ = true;
var engine_base_MathUtils = function() { };
engine_base_MathUtils.__name__ = true;
engine_base_MathUtils.angleBetweenPoints = function(point1,point2) {
	return Math.atan2(point2.y - point1.y,point2.x - point1.x);
};
engine_base_MathUtils.degreeToRads = function(degrees) {
	return Math.PI / 180 * degrees;
};
engine_base_MathUtils.radsToDegree = function(rads) {
	return rads * (180 / Math.PI);
};
engine_base_MathUtils.normalizeAngle = function(rads) {
	rads %= 2 * Math.PI;
	if(rads >= 0) {
		return rads;
	} else {
		return rads + 2 * Math.PI;
	}
};
engine_base_MathUtils.rotatePointAroundCenter = function(x,y,cx,cy,r) {
	var cos = Math.cos(r);
	var sin = Math.sin(r);
	return new engine_base_geometry_Point(cos * (x - cx) - sin * (y - cy) + cx,cos * (y - cy) + sin * (x - cx) + cy);
};
engine_base_MathUtils.lineToLineIntersection = function(lineA,lineB) {
	var numA = (lineB.x2 - lineB.x1) * (lineA.y1 - lineB.y1) - (lineB.y2 - lineB.y1) * (lineA.x1 - lineB.x1);
	var numB = (lineA.x2 - lineA.x1) * (lineA.y1 - lineB.y1) - (lineA.y2 - lineA.y1) * (lineA.x1 - lineB.x1);
	var deNom = (lineB.y2 - lineB.y1) * (lineA.x2 - lineA.x1) - (lineB.x2 - lineB.x1) * (lineA.y2 - lineA.y1);
	if(deNom == 0) {
		return false;
	}
	var uA = numA / deNom;
	var uB = numB / deNom;
	if(uA >= 0 && uA <= 1 && uB >= 0) {
		return uB <= 1;
	} else {
		return false;
	}
};
engine_base_MathUtils.differ = function(a,b,error) {
	return Math.abs(a - b) > (error == 0 ? 1 : error);
};
engine_base_MathUtils.differInt = function(a,b,error) {
	return Math.abs(a - b) > (error == 0 ? 1 : error);
};
engine_base_MathUtils.randomIntInRange = function(from,to) {
	return from + Math.floor((to - from + 1) * Math.random());
};
var engine_base_EngineUtils = function() { };
engine_base_EngineUtils.__name__ = true;
engine_base_EngineUtils.HashString = function(str) {
	var strLen = str.length;
	if(strLen == 0) {
		return 0;
	}
	var hc = 0;
	var _g = 0;
	var _g1 = strLen;
	while(_g < _g1) {
		var i = _g++;
		hc = ((hc << 5) - hc | 0) + HxOverrides.cca(str,i) | 0;
	}
	return hc;
};
var engine_base_core_BaseEngine = $hx_exports["engine"]["base"]["core"]["BaseEngine"] = function(engineMode) {
	this.coldInputCommands = [];
	this.coldInputCommandsTreshhold = 10;
	this.ticksSinceLastPop = 0;
	this.hotInputCommands = [];
	this.deleteProjectileEntityQueue = [];
	this.createProjectileEntityQueue = [];
	this.deleteConsumableEntityQueue = [];
	this.createConsumableEntityQueue = [];
	this.deleteCharacterEntityQueue = [];
	this.createCharacterEntityQueue = [];
	this.validatedInputCommands = [];
	this.playerToEntityMap = new haxe_ds_StringMap();
	this.consumableEntityManager = new engine_base_entity_base_EngineBaseEntityManager();
	this.projectileEntityManager = new engine_base_entity_base_EngineBaseEntityManager();
	this.characterEntityManager = new engine_base_entity_base_EngineBaseEntityManager();
	this.gameState = 1;
	var _gthis = this;
	this.engineMode = engineMode;
	var loop = function(dt,tick) {
		_gthis.tick = tick;
		if(_gthis.ticksSinceLastPop == _gthis.coldInputCommandsTreshhold) {
			_gthis.ticksSinceLastPop = 0;
			_gthis.coldInputCommands.shift();
		}
		_gthis.ticksSinceLastPop++;
		_gthis.processCreateCharacterQueue();
		_gthis.processDeleteCharacterQueue();
		_gthis.processCreateConsumableQueue();
		_gthis.processDeleteConsumableQueue();
		_gthis.processCreateProjectileQueue();
		_gthis.processDeleteProjectileQueue();
		_gthis.engineLoopUpdate(dt);
		if(_gthis.hotInputCommands.length > 0) {
			_gthis.processInputCommands(_gthis.hotInputCommands);
			_gthis.hotInputCommands = [];
		}
		if(_gthis.postLoopCallback != null) {
			_gthis.postLoopCallback();
		}
		_gthis.validatedInputCommands = [];
	};
	this.gameLoop = new engine_base_core_GameLoop(loop);
	this.okLoopTime = 1000 / this.gameLoop.targetFps | 0;
};
engine_base_core_BaseEngine.__name__ = true;
engine_base_core_BaseEngine.prototype = {
	createCharacterEntity: function(entity) {
		this.createCharacterEntityQueue.push({ entity : entity});
	}
	,deleteCharacterEntityByOwnerId: function(ownerId) {
		this.deleteCharacterEntityQueue.push(this.getCharacterEntityIdByOwnerId(ownerId));
	}
	,deleteCharacterEntity: function(entityId) {
		this.deleteCharacterEntityQueue.push(entityId);
	}
	,getCharacterEntityById: function(id) {
		return this.characterEntityManager.getEntityById(id);
	}
	,getCharacterEntityIdByOwnerId: function(id) {
		return this.playerToEntityMap.h[id];
	}
	,getCharacterEntityByOwnerId: function(id) {
		return this.characterEntityManager.getEntityById(this.playerToEntityMap.h[id]);
	}
	,updateCharacterEntitiesByServer: function(minEntities) {
		var _g = 0;
		while(_g < minEntities.length) {
			var minEntity = minEntities[_g];
			++_g;
			var entity = js_Boot.__cast(this.characterEntityManager.entities.get(minEntity.id) , engine_base_entity_impl_EngineCharacterEntity);
			if(entity != null) {
				entity.setHealth(minEntity.health);
				if(entity.getOwnerId() == this.localPlayerId) {
					var xDiff = Math.abs(entity.getX() - minEntity.x);
					var yDiff = Math.abs(entity.getY() - minEntity.y);
					if(xDiff + yDiff <= entity.getMovementSpeed() * 3) {
						continue;
					}
				}
				entity.setX(minEntity.x);
				entity.setY(minEntity.y);
				entity.setSide(minEntity.side);
			}
		}
	}
	,setCharacterNextActionToPerform: function(entityId,characterActionType) {
		var entity = this.characterEntityManager.getEntityById(entityId);
		if(entity != null) {
			(js_Boot.__cast(entity , engine_base_entity_impl_EngineCharacterEntity)).setNextActionToPerform(characterActionType);
		}
	}
	,getCharacterEntitiesMap: function() {
		return this.characterEntityManager.entities;
	}
	,getCharactersStruct: function(params) {
		var result = [];
		var jsIterator = this.characterEntityManager.entities.values();
		var _g_jsIterator = jsIterator;
		var _g_lastStep = jsIterator.next();
		while(!_g_lastStep.done) {
			var v = _g_lastStep.value;
			_g_lastStep = _g_jsIterator.next();
			var entity = v;
			if(params.changed == true && !entity.isChanged()) {
				continue;
			}
			var entityStruct;
			if(params.full == true) {
				entityStruct = (js_Boot.__cast(entity , engine_base_entity_impl_EngineCharacterEntity)).getEntityFullStruct();
			} else {
				entityStruct = (js_Boot.__cast(entity , engine_base_entity_impl_EngineCharacterEntity)).getEntityMinStruct();
			}
			result.push(entityStruct);
		}
		return result;
	}
	,processCreateCharacterQueue: function() {
		var _g = 0;
		var _g1 = this.createCharacterEntityQueue;
		while(_g < _g1.length) {
			var queueTask = _g1[_g];
			++_g;
			this.characterEntityManager.add(queueTask.entity);
			if(queueTask.entity.getEntityType() == 1 || queueTask.entity.getEntityType() == 2) {
				var this1 = this.playerToEntityMap;
				var key = queueTask.entity.getOwnerId();
				var value = queueTask.entity.getId();
				this1.h[key] = value;
			}
			if(this.createCharacterCallback != null) {
				this.createCharacterCallback(queueTask.entity);
			}
		}
		this.createCharacterEntityQueue = [];
	}
	,processDeleteCharacterQueue: function() {
		var _g = 0;
		var _g1 = this.deleteCharacterEntityQueue;
		while(_g < _g1.length) {
			var entityId = _g1[_g];
			++_g;
			var entity = js_Boot.__cast(this.characterEntityManager.getEntityById(entityId) , engine_base_entity_impl_EngineCharacterEntity);
			if(entity != null) {
				if(this.deleteCharacterCallback != null) {
					this.deleteCharacterCallback(js_Boot.__cast(entity , engine_base_entity_impl_EngineCharacterEntity));
				}
				var this1 = this.playerToEntityMap;
				var key = entity.getOwnerId();
				var _this = this1;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
				this.characterEntityManager.delete(entity.getId());
				if(this.localPlayerId != null) {
					if(this.localPlayerId == entity.getOwnerId()) {
						this.gameState = 3;
					}
				}
			}
		}
		this.deleteCharacterEntityQueue = [];
	}
	,createProjectileEntity: function(entity) {
		this.createProjectileEntityQueue.push({ entity : entity});
	}
	,deleteProjectileEntity: function(entityId) {
		this.deleteProjectileEntityQueue.push(entityId);
	}
	,processCreateProjectileQueue: function() {
		var _g = 0;
		var _g1 = this.createProjectileEntityQueue;
		while(_g < _g1.length) {
			var queueTask = _g1[_g];
			++_g;
			this.projectileEntityManager.add(queueTask.entity);
			if(this.createProjectileCallback != null) {
				this.createProjectileCallback(queueTask.entity);
			}
		}
		this.createProjectileEntityQueue = [];
	}
	,processDeleteProjectileQueue: function() {
		var _g = 0;
		var _g1 = this.deleteProjectileEntityQueue;
		while(_g < _g1.length) {
			var entityId = _g1[_g];
			++_g;
			var entity = js_Boot.__cast(this.projectileEntityManager.getEntityById(entityId) , engine_base_entity_impl_EngineProjectileEntity);
			if(entity != null) {
				if(this.deleteProjectileCallback != null) {
					this.deleteProjectileCallback(entity);
				}
				this.projectileEntityManager.delete(entity.getId());
			}
		}
		this.deleteProjectileEntityQueue = [];
	}
	,createConsumableEntity: function(entity) {
		this.createConsumableEntityQueue.push({ entity : entity});
	}
	,deleteConsumableEntity: function(entityId,takenByCharacterId) {
		this.deleteConsumableEntityQueue.push({ entityId : entityId, takenByCharacterId : takenByCharacterId});
	}
	,processCreateConsumableQueue: function() {
		var _g = 0;
		var _g1 = this.createConsumableEntityQueue;
		while(_g < _g1.length) {
			var queueTask = _g1[_g];
			++_g;
			this.consumableEntityManager.add(queueTask.entity);
			if(this.createConsumableCallback != null) {
				this.createConsumableCallback(queueTask.entity);
			}
		}
		this.createConsumableEntityQueue = [];
	}
	,processDeleteConsumableQueue: function() {
		var _g = 0;
		var _g1 = this.deleteConsumableEntityQueue;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			var entity = js_Boot.__cast(this.consumableEntityManager.getEntityById(task.entityId) , engine_base_entity_impl_EngineConsumableEntity);
			if(entity != null) {
				if(this.deleteConsumableCallback != null) {
					this.deleteConsumableCallback(task);
				}
				this.consumableEntityManager.delete(task.entityId);
			}
		}
		this.deleteConsumableEntityQueue = [];
	}
	,checkLocalMovementInputAllowance: function(entityId) {
		var entity = js_Boot.__cast(this.characterEntityManager.getEntityById(entityId) , engine_base_entity_impl_EngineCharacterEntity);
		if(entity == null) {
			return false;
		} else if(entity.checkLocalMovementInput()) {
			return entity.canPerformMove();
		} else {
			return false;
		}
	}
	,checkLocalActionInputAllowance: function(entityId,characterActionType) {
		var entity = js_Boot.__cast(this.characterEntityManager.getEntityById(entityId) , engine_base_entity_impl_EngineCharacterEntity);
		if(entity == null) {
			return false;
		} else if(entity.checkLocalActionInput(characterActionType)) {
			return entity.canPerformAction(characterActionType);
		} else {
			return false;
		}
	}
	,addInputCommandServer: function(input) {
		this.addInputCommandClient(new engine_base_PlayerInputCommand(input.actionType,input.movAngle,input.userId));
	}
	,addInputCommandClient: function(input) {
		if(input.actionType != null && input.userId != null) {
			var wrappedCommand = new engine_base_InputCommandEngineWrapped(input,this.tick);
			this.hotInputCommands.push(wrappedCommand);
			this.coldInputCommands.push(wrappedCommand);
		}
	}
	,setLocalPlayerId: function(localPlayerId) {
		this.localPlayerId = localPlayerId;
	}
	,destroy: function() {
		this.postLoopCallback = null;
		this.createCharacterCallback = null;
		this.deleteCharacterCallback = null;
		this.createProjectileCallback = null;
		this.deleteProjectileCallback = null;
		this.gameLoop.stopLoop();
		this.characterEntityManager.destroy();
		this.projectileEntityManager.destroy();
		this.customDestroy();
	}
	,__class__: engine_base_core_BaseEngine
};
var engine_base_core_Loop = function() { };
engine_base_core_Loop.__name__ = true;
engine_base_core_Loop.__isInterface__ = true;
engine_base_core_Loop.prototype = {
	__class__: engine_base_core_Loop
};
var engine_base_core_GameLoop = $hx_exports["engine"]["base"]["core"]["GameLoop"] = function(update) {
	this.targetFps = engine_base_EngineConfig.TARGET_FPS;
	this.gameLoop = new engine_base_core_DummyJsLoop(update,this.targetFps);
};
engine_base_core_GameLoop.__name__ = true;
engine_base_core_GameLoop.prototype = {
	stopLoop: function() {
		this.gameLoop.stopLoop();
	}
	,__class__: engine_base_core_GameLoop
};
var engine_base_core_DummyJsLoop = function(update,targetFps) {
	this.active = true;
	this.delta = 0.0;
	this.previous = Date.now();
	this.tick = 0;
	this.targetFPSMillis = Math.floor(1000 / targetFps);
	this.update = update;
	this.loop();
};
engine_base_core_DummyJsLoop.__name__ = true;
engine_base_core_DummyJsLoop.__interfaces__ = [engine_base_core_Loop];
engine_base_core_DummyJsLoop.prototype = {
	stopLoop: function() {
		this.active = false;
	}
	,loop: function() {
		if(this.active) {
			haxe_Timer.delay($bind(this,this.loop),this.targetFPSMillis);
			var now = Date.now();
			this.delta = (now - this.previous) / 1000;
			this.update(this.delta,this.tick);
			this.previous = now;
			this.tick++;
		}
	}
	,__class__: engine_base_core_DummyJsLoop
};
var engine_base_entity_base_EngineBaseEntity = function(baseEntity) {
	this.baseEntity = baseEntity;
};
engine_base_entity_base_EngineBaseEntity.__name__ = true;
engine_base_entity_base_EngineBaseEntity.prototype = {
	isChanged: function() {
		return this.previousTickHash != this.currentTickHash;
	}
	,moveBy: function(x,y) {
		this.baseEntity.x += x | 0;
		this.baseEntity.y += y | 0;
	}
	,getBodyRectangle: function(rotated) {
		if(rotated == null) {
			rotated = false;
		}
		var shapeWidth = this.baseEntity.entityShape.width;
		var shapeHeight = this.baseEntity.entityShape.height;
		var rectOffsetX = this.baseEntity.entityShape.rectOffsetX;
		var rectOffsetY = this.baseEntity.entityShape.rectOffsetY;
		var x = this.baseEntity.x;
		var y = this.baseEntity.y;
		return new engine_base_geometry_Rectangle(x + rectOffsetX,y + rectOffsetY,shapeWidth,shapeHeight,rotated ? this.baseEntity.rotation : 0);
	}
	,getX: function() {
		return this.baseEntity.x;
	}
	,getY: function() {
		return this.baseEntity.y;
	}
	,getId: function() {
		return this.baseEntity.id;
	}
	,getEntityType: function() {
		return this.baseEntity.entityType;
	}
	,getOwnerId: function() {
		return this.baseEntity.ownerId;
	}
	,getRotation: function() {
		return this.baseEntity.rotation;
	}
	,isPlayer: function() {
		if(this.baseEntity.entityType != 1) {
			return this.baseEntity.entityType == 2;
		} else {
			return true;
		}
	}
	,isBot: function() {
		if(this.baseEntity.entityType != 3) {
			return this.baseEntity.entityType == 4;
		} else {
			return true;
		}
	}
	,setX: function(x) {
		this.baseEntity.x = x;
	}
	,setY: function(y) {
		this.baseEntity.y = y;
	}
	,setRotation: function(r) {
		this.baseEntity.rotation = r;
	}
	,__class__: engine_base_entity_base_EngineBaseEntity
};
var engine_base_entity_base_EngineBaseEntityManager = function() {
	this.entities = new Map();
};
engine_base_entity_base_EngineBaseEntityManager.__name__ = true;
engine_base_entity_base_EngineBaseEntityManager.prototype = {
	destroy: function() {
		this.entities.clear();
	}
	,getChangedEntities: function() {
		var result = [];
		this.entities.forEach(function(value,key,map) {
			if(value.isChanged()) {
				result.push(value);
			}
		});
		return result;
	}
	,getEntitiesByEntityType: function(entityType) {
		var result = [];
		this.entities.forEach(function(value,key,map) {
			if(value.getEntityType() == entityType) {
				result.push(value);
			}
		});
		return result;
	}
	,add: function(entity) {
		this.entities.set(entity.getId(),entity);
	}
	,'delete': function(id) {
		this.entities.delete(id);
	}
	,getEntityById: function(id) {
		return this.entities.get(id);
	}
	,__class__: engine_base_entity_base_EngineBaseEntityManager
};
var engine_base_entity_impl_GameEntityCustomUpdate = function() { };
engine_base_entity_impl_GameEntityCustomUpdate.__name__ = true;
engine_base_entity_impl_GameEntityCustomUpdate.__isInterface__ = true;
engine_base_entity_impl_GameEntityCustomUpdate.prototype = {
	__class__: engine_base_entity_impl_GameEntityCustomUpdate
};
var engine_base_entity_impl_GameEntityCustomCollide = function() { };
engine_base_entity_impl_GameEntityCustomCollide.__name__ = true;
engine_base_entity_impl_GameEntityCustomCollide.__isInterface__ = true;
engine_base_entity_impl_GameEntityCustomCollide.prototype = {
	__class__: engine_base_entity_impl_GameEntityCustomCollide
};
var engine_base_entity_impl_EngineCharacterEntity = function(characterEntity) {
	this.lastActionUltimateInputCheck = 0.0;
	this.lastAction3InputCheck = 0.0;
	this.lastAction2InputCheck = 0.0;
	this.lastAction1InputCheck = 0.0;
	this.lastActionMainInputCheck = 0.0;
	this.isActing = false;
	this.dy = 0.0;
	this.dx = 0.0;
	this.lastLocalMovementInputCheck = 0.0;
	this.isRunning = false;
	this.isWalking = false;
	this.botAttackRange = 200;
	this.botForwardLookingLineLength = 100;
	this.playerForwardLookingLineLength = 200;
	this.intersectsWithCharacter = false;
	this.canMove = true;
	this.isCollides = true;
	this.isAlive = true;
	this.randomizedTargetPos = new engine_base_geometry_Point();
	engine_base_entity_base_EngineBaseEntity.call(this,characterEntity);
	this.characterEntity = characterEntity;
	this.maxHealth = characterEntity.health;
	if(!this.isPlayer()) {
		this.botForwardLookingLine = new engine_base_geometry_Line();
	}
	if(this.baseEntity.id == null) {
		this.baseEntity.id = uuid_Uuid.short();
	}
	if(this.baseEntity.ownerId == null) {
		this.baseEntity.ownerId = uuid_Uuid.short();
	}
	this.currentVitality = this.characterEntity.movement.vitality;
	this.actionMain = this.characterEntity.actionMain;
	this.action1 = this.characterEntity.action1;
	this.action2 = this.characterEntity.action2;
	this.action3 = this.characterEntity.action3;
	this.actionUltimate = this.characterEntity.actionUltimate;
};
engine_base_entity_impl_EngineCharacterEntity.__name__ = true;
engine_base_entity_impl_EngineCharacterEntity.__super__ = engine_base_entity_base_EngineBaseEntity;
engine_base_entity_impl_EngineCharacterEntity.prototype = $extend(engine_base_entity_base_EngineBaseEntity.prototype,{
	update: function(dt) {
		this.lastDeltaTime = dt;
		this.debugActionToPerform = null;
		if(this.hasTargetObject() && !this.isPlayer()) {
			var angleBetweenEntities = engine_base_MathUtils.angleBetweenPoints(this.getBodyRectangle().getCenter(),this.targetObjectEntity.getBodyRectangle().getCenter());
			this.baseEntity.rotation = angleBetweenEntities;
			var l = this.getForwardLookingLine(this.botForwardLookingLineLength);
			this.botForwardLookingLine.x1 = l.x1;
			this.botForwardLookingLine.y1 = l.y1;
			this.botForwardLookingLine.x2 = l.x2;
			this.botForwardLookingLine.y2 = l.y2;
		}
		if(this.customUpdate != null) {
			this.customUpdate.onUpdate();
		}
		if(this.hasTargetObject() && !this.isPlayer()) {
			this.aiMoveToTarget();
			if(this.ifTargetInAttackRange()) {
				this.aiMeleeAttack();
			}
		}
		if(this.customUpdate != null) {
			this.customUpdate.postUpdate();
		}
		this.renegerateVitality();
		this.updateHash();
	}
	,getVirtualBodyRectangleInFuture: function(ticks) {
		var cachedPositionX = this.baseEntity.x;
		var cachedPositionY = this.baseEntity.y;
		var _g = 0;
		var _g1 = ticks;
		while(_g < _g1) {
			var i = _g++;
		}
		var resultingRect = this.getBodyRectangle();
		this.baseEntity.x = cachedPositionX;
		this.baseEntity.y = cachedPositionY;
		return resultingRect;
	}
	,getForwardLookingLine: function(lineLength) {
		var rect = this.getBodyRectangle();
		var x1 = rect.getCenter().x;
		var y1 = rect.getCenter().y;
		var p = engine_base_MathUtils.rotatePointAroundCenter(x1 + lineLength,y1,x1,y1,this.baseEntity.rotation);
		var x2 = p.x;
		var y2 = p.y;
		return new engine_base_geometry_Line(x1,y1,x2,y2);
	}
	,updateHash: function() {
		var hash = this.updateHashImpl();
		if(this.previousTickHash == null && this.currentTickHash == null) {
			this.previousTickHash = hash;
			this.currentTickHash = hash;
		} else {
			this.previousTickHash = this.currentTickHash;
			this.currentTickHash = hash;
		}
	}
	,setTargetObject: function(targetObjectEntity,randomizePos) {
		if(randomizePos == null) {
			randomizePos = false;
		}
		this.targetObjectEntity = targetObjectEntity;
		if(randomizePos) {
			var minusX = engine_base_MathUtils.randomIntInRange(1,2) == 1;
			var minusY = engine_base_MathUtils.randomIntInRange(1,2) == 1;
			var rndX = engine_base_MathUtils.randomIntInRange(1,30);
			var rndY = engine_base_MathUtils.randomIntInRange(1,30);
			this.randomizedTargetPos.x = minusX ? -rndX : rndX;
			this.randomizedTargetPos.y = minusY ? -rndY : rndY;
		} else {
			this.randomizedTargetPos.x = 0;
			this.randomizedTargetPos.y = 0;
		}
	}
	,clearTargetObject: function() {
		this.targetObjectEntity = null;
	}
	,getTargetObject: function() {
		return this.targetObjectEntity;
	}
	,hasTargetObject: function() {
		return this.targetObjectEntity != null;
	}
	,ifTargetInAttackRange: function() {
		return this.distanceBetweenTarget() < this.botAttackRange;
	}
	,distanceBetweenTarget: function() {
		if(this.hasTargetObject()) {
			var _this = this.getBodyRectangle().getCenter();
			var p = this.targetObjectEntity.getBodyRectangle().getCenter();
			var dx = _this.x - p.x;
			var dy = _this.y - p.y;
			return Math.sqrt(dx * dx + dy * dy);
		} else {
			return 0;
		}
	}
	,renegerateVitality: function() {
		if(this.characterEntity.movement.canRun && !this.isWalking && !this.isRunning) {
			this.currentVitality += this.characterEntity.movement.vitalityRegenPerSec;
		}
	}
	,determenisticMove: function() {
		if(this.canMove) {
			var speed = this.characterEntity.movement.runSpeed;
			if(this.characterEntity.movement.canRun && this.currentVitality > 0) {
				this.currentVitality -= this.characterEntity.movement.vitalityConsumptionPerSec;
				speed = this.characterEntity.movement.runSpeed;
				this.isRunning = true;
				this.isWalking = false;
			} else {
				this.isRunning = false;
				this.isWalking = true;
			}
			this.dx = speed * Math.cos(this.baseEntity.rotation);
			this.dy = speed * Math.sin(this.baseEntity.rotation);
			this.characterEntity.side = this.baseEntity.x + this.dx > this.baseEntity.x ? 2 : 1;
			this.baseEntity.x += this.dx | 0;
			this.baseEntity.y += this.dy | 0;
		}
	}
	,checkLocalMovementInput: function() {
		var now = HxOverrides.now() / 1000;
		if(this.lastLocalMovementInputCheck == 0 || this.lastLocalMovementInputCheck + this.characterEntity.movement.movementDelay < now) {
			this.lastLocalMovementInputCheck = now;
			return true;
		} else {
			return false;
		}
	}
	,checkLocalActionInput: function(characterActionType) {
		var now = HxOverrides.now() / 1000;
		var allow = false;
		switch(characterActionType) {
		case 2:
			if(this.lastActionMainInputCheck == 0 || this.lastActionMainInputCheck + this.actionMain.inputDelay < now) {
				this.lastActionMainInputCheck = now;
				allow = true;
			}
			break;
		case 3:
			if(this.lastAction1InputCheck == 0 || this.lastAction1InputCheck + this.action1.inputDelay < now) {
				this.lastAction1InputCheck = now;
				allow = true;
			}
			break;
		case 4:
			if(this.lastAction2InputCheck == 0 || this.lastAction2InputCheck + this.action2.inputDelay < now) {
				this.lastAction2InputCheck = now;
				allow = true;
			}
			break;
		case 5:
			if(this.lastAction3InputCheck == 0 || this.lastAction3InputCheck + this.action3.inputDelay < now) {
				this.lastAction3InputCheck = now;
				allow = true;
			}
			break;
		case 6:
			if(this.lastActionUltimateInputCheck == 0 || this.lastActionUltimateInputCheck + this.actionUltimate.inputDelay < now) {
				this.lastActionUltimateInputCheck = now;
				allow = true;
			}
			break;
		default:
		}
		return allow;
	}
	,setNextActionToPerform: function(characterActionType) {
		this.isActing = true;
		switch(characterActionType) {
		case 2:
			this.actionToPerform = this.actionMain;
			break;
		case 3:
			this.actionToPerform = this.action1;
			break;
		case 4:
			this.actionToPerform = this.action2;
			break;
		case 5:
			this.actionToPerform = this.action3;
			break;
		case 6:
			this.actionToPerform = this.actionUltimate;
			break;
		default:
		}
		this.debugActionToPerform = this.actionToPerform;
	}
	,addHealth: function(add) {
		this.characterEntity.health += add;
		if(this.characterEntity.health > this.maxHealth) {
			this.characterEntity.health = this.maxHealth;
		}
	}
	,subtractHealth: function(subtract) {
		this.characterEntity.health -= subtract;
		if(this.characterEntity.health < 0) {
			this.characterEntity.health = 0;
		}
		return this.characterEntity.health;
	}
	,aiMoveToTarget: function() {
		if(this.canMove && !this.ifTargetInAttackRange()) {
			var speed = this.characterEntity.movement.runSpeed;
			this.dx = speed * Math.cos(this.baseEntity.rotation) * this.lastDeltaTime;
			this.dy = speed * Math.sin(this.baseEntity.rotation) * this.lastDeltaTime;
			if(this.dx > 0.1 && this.dx < 1) {
				this.dx = 1;
			}
			if(this.dy > 0 && this.dy < 1) {
				this.dy = 1;
			}
			this.characterEntity.side = this.baseEntity.x + this.dx > this.baseEntity.x ? 2 : 1;
			this.baseEntity.x += this.dx | 0;
			this.baseEntity.y += this.dy | 0;
		}
	}
	,aiMeleeAttack: function() {
		if(this.checkLocalActionInput(2)) {
			this.setNextActionToPerform(2);
		}
	}
	,getEntityFullStruct: function() {
		return this.characterEntity.toFullStruct();
	}
	,getEntityMinStruct: function() {
		return this.characterEntity.toMinStruct();
	}
	,getCurrentActionRect: function(debug) {
		if(debug == null) {
			debug = false;
		}
		var action = debug ? this.debugActionToPerform : this.actionToPerform;
		if(action == null) {
			return null;
		}
		if(action.meleeStruct != null) {
			var shape = new engine_base_EntityShape(action.meleeStruct.shape);
			var rect = shape.toRect(this.getBodyRectangle().getTopLeftPoint().x,this.getBodyRectangle().getTopLeftPoint().y - this.baseEntity.entityShape.height / 4,0,this.characterEntity.side);
			return rect;
		} else if(action.projectileStruct != null) {
			var shape = new engine_base_EntityShape(action.projectileStruct.shape);
			var rect = shape.toRect(this.baseEntity.x,this.baseEntity.y,0,this.characterEntity.side);
			return rect;
		} else {
			return null;
		}
	}
	,getMovementSpeed: function() {
		return this.characterEntity.movement.runSpeed;
	}
	,getCurrentHealth: function() {
		return this.characterEntity.health;
	}
	,getMaxHealth: function() {
		return this.maxHealth;
	}
	,getSide: function() {
		return this.characterEntity.side;
	}
	,getShape: function() {
		return this.characterEntity.entityShape;
	}
	,setSide: function(side) {
		this.characterEntity.side = side;
	}
	,setHealth: function(health) {
		return this.characterEntity.health = health;
	}
	,__class__: engine_base_entity_impl_EngineCharacterEntity
});
var engine_base_entity_impl_EngineConsumableEntity = function(baseEntity,amount) {
	engine_base_entity_base_EngineBaseEntity.call(this,baseEntity);
	if(baseEntity.id == null) {
		baseEntity.id = uuid_Uuid.short();
	}
	this.amount = amount;
};
engine_base_entity_impl_EngineConsumableEntity.__name__ = true;
engine_base_entity_impl_EngineConsumableEntity.__super__ = engine_base_entity_base_EngineBaseEntity;
engine_base_entity_impl_EngineConsumableEntity.prototype = $extend(engine_base_entity_base_EngineBaseEntity.prototype,{
	update: function(dt) {
	}
	,getEntityBaseStruct: function() {
		return this.baseEntity.getBaseStruct();
	}
	,__class__: engine_base_entity_impl_EngineConsumableEntity
});
var engine_base_entity_impl_EngineProjectileEntity = function(projectileEntity) {
	this.traveledDistance = 0.0;
	this.allowMovement = true;
	engine_base_entity_base_EngineBaseEntity.call(this,projectileEntity);
	this.projectileEntity = projectileEntity;
	if(this.baseEntity.id == null) {
		this.baseEntity.id = uuid_Uuid.short();
	}
	if(this.baseEntity.ownerId == null) {
		this.baseEntity.ownerId = uuid_Uuid.short();
	}
};
engine_base_entity_impl_EngineProjectileEntity.__name__ = true;
engine_base_entity_impl_EngineProjectileEntity.__super__ = engine_base_entity_base_EngineBaseEntity;
engine_base_entity_impl_EngineProjectileEntity.prototype = $extend(engine_base_entity_base_EngineBaseEntity.prototype,{
	update: function(dt) {
		if(this.allowMovement) {
			var step = this.calculateAndGetFrameMoveStep(dt);
			this.moveBy(step.dx,step.dy);
		}
	}
	,calculateAndGetFrameMoveStep: function(dt) {
		var dx = this.projectileEntity.projectile.speed * Math.cos(this.baseEntity.rotation) * dt;
		var dy = this.projectileEntity.projectile.speed * Math.sin(this.baseEntity.rotation) * dt;
		this.traveledDistance += dx + dy;
		if(this.traveledDistance > this.projectileEntity.projectile.travelDistance) {
			this.allowMovement = false;
		}
		return { dx : dx, dy : dy, allowMovement : this.allowMovement};
	}
	,__class__: engine_base_entity_impl_EngineProjectileEntity
});
var engine_base_geometry_Line = function(x1,y1,x2,y2) {
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	this.x1 = x1;
	this.y1 = y1;
	this.x2 = x2;
	this.y2 = y2;
};
engine_base_geometry_Line.__name__ = true;
engine_base_geometry_Line.prototype = {
	getMidPoint: function() {
		return new engine_base_geometry_Point((this.x1 + this.x2) / 2,(this.y1 + this.y2) / 2);
	}
	,intersectsWithLine: function(line) {
		return engine_base_MathUtils.lineToLineIntersection(this,line);
	}
	,__class__: engine_base_geometry_Line
};
var engine_base_geometry_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
engine_base_geometry_Point.__name__ = true;
engine_base_geometry_Point.prototype = {
	distanceSq: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return dx * dx + dy * dy;
	}
	,distance: function(p) {
		var dx = this.x - p.x;
		var dy = this.y - p.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,__class__: engine_base_geometry_Point
};
var engine_base_geometry_Rectangle = function(x,y,w,h,r) {
	this.x = x;
	this.y = y;
	this.w = w;
	this.h = h;
	this.r = r;
};
engine_base_geometry_Rectangle.__name__ = true;
engine_base_geometry_Rectangle.prototype = {
	updatePosition: function(x,y,r) {
		this.x = x;
		this.y = y;
		this.r = r;
	}
	,getCenter: function(offsetX,offsetY) {
		if(offsetY == null) {
			offsetY = 0;
		}
		if(offsetX == null) {
			offsetX = 0;
		}
		return new engine_base_geometry_Point(this.x + offsetX,this.y + offsetY);
	}
	,getCenterBottom: function() {
		return new engine_base_geometry_Point(this.x,this.getBottom());
	}
	,getMaxSide: function() {
		if(this.w > this.h) {
			return this.w;
		} else {
			return this.h;
		}
	}
	,getLeft: function() {
		return this.x - this.w / 2;
	}
	,getRight: function() {
		return this.x + this.w / 2;
	}
	,getTop: function() {
		return this.y - this.h / 2;
	}
	,getBottom: function() {
		return this.y + this.h / 2;
	}
	,getTopLeftPoint: function() {
		var rotatedCoords = engine_base_MathUtils.rotatePointAroundCenter(this.getLeft(),this.getTop(),this.x,this.y,this.r);
		return new engine_base_geometry_Point(rotatedCoords.x,rotatedCoords.y);
	}
	,getBottomLeftPoint: function() {
		var rotatedCoords = engine_base_MathUtils.rotatePointAroundCenter(this.getLeft(),this.getBottom(),this.x,this.y,this.r);
		return new engine_base_geometry_Point(rotatedCoords.x,rotatedCoords.y);
	}
	,getTopRightPoint: function() {
		var rotatedCoords = engine_base_MathUtils.rotatePointAroundCenter(this.getRight(),this.getTop(),this.x,this.y,this.r);
		return new engine_base_geometry_Point(rotatedCoords.x,rotatedCoords.y);
	}
	,getBottomRightPoint: function() {
		var rotatedCoords = engine_base_MathUtils.rotatePointAroundCenter(this.getRight(),this.getBottom(),this.x,this.y,this.r);
		return new engine_base_geometry_Point(rotatedCoords.x,rotatedCoords.y);
	}
	,getLines: function() {
		var topLeftPoint = this.getTopLeftPoint();
		var bottomLeftPoint = this.getBottomLeftPoint();
		var topRightPoint = this.getTopRightPoint();
		var bottomRightPoint = this.getBottomRightPoint();
		return { lineA : new engine_base_geometry_Line(topLeftPoint.x,topLeftPoint.y,topRightPoint.x,topRightPoint.y), lineB : new engine_base_geometry_Line(topRightPoint.x,topRightPoint.y,bottomRightPoint.x,bottomRightPoint.y), lineC : new engine_base_geometry_Line(bottomRightPoint.x,bottomRightPoint.y,bottomLeftPoint.x,bottomLeftPoint.y), lineD : new engine_base_geometry_Line(bottomLeftPoint.x,bottomLeftPoint.y,topLeftPoint.x,topLeftPoint.y)};
	}
	,containsRect: function(b) {
		var result = true;
		if(this.getLeft() >= b.getRight() || b.getLeft() >= this.getRight()) {
			result = false;
		}
		if(this.getTop() >= b.getBottom() || b.getTop() >= this.getBottom()) {
			result = false;
		}
		return result;
	}
	,containtPoint: function(p) {
		if(this.getLeft() <= p.x && this.getRight() >= p.x && this.getTop() <= p.y) {
			return this.getBottom() >= p.y;
		} else {
			return false;
		}
	}
	,intersectsWithLine: function(line) {
		var lines = this.getLines();
		if(lines.lineA.intersectsWithLine(line)) {
			return true;
		} else if(lines.lineB.intersectsWithLine(line)) {
			return true;
		} else if(lines.lineC.intersectsWithLine(line)) {
			return true;
		} else if(lines.lineD.intersectsWithLine(line)) {
			return true;
		}
		return false;
	}
	,intersectsWithPoint: function(point) {
		if(this.r == 0) {
			if(Math.abs(this.x - point.x) < this.w / 2) {
				return Math.abs(this.y - point.y) < this.h / 2;
			} else {
				return false;
			}
		}
		var tx = Math.cos(this.r) * point.x - Math.sin(this.r) * point.y;
		var ty = Math.cos(this.r) * point.y + Math.sin(this.r) * point.x;
		var cx = Math.cos(this.r) * this.x - Math.sin(this.r) * this.y;
		var cy = Math.cos(this.r) * this.y + Math.sin(this.r) * this.x;
		if(Math.abs(cx - tx) < this.w / 2) {
			return Math.abs(cy - ty) < this.h / 2;
		} else {
			return false;
		}
	}
	,intersectsWithRect: function(b) {
		if(this.r == 0 && b.r == 0) {
			return this.containsRect(b);
		} else {
			var rA = this.getLines();
			var rB = b.getLines();
			if(rA.lineA.intersectsWithLine(rB.lineA) || rA.lineA.intersectsWithLine(rB.lineB) || rA.lineA.intersectsWithLine(rB.lineC) || rA.lineA.intersectsWithLine(rB.lineD)) {
				return true;
			}
			if(rA.lineB.intersectsWithLine(rB.lineA) || rA.lineB.intersectsWithLine(rB.lineB) || rA.lineB.intersectsWithLine(rB.lineC) || rA.lineB.intersectsWithLine(rB.lineD)) {
				return true;
			}
			if(rA.lineC.intersectsWithLine(rB.lineA) || rA.lineC.intersectsWithLine(rB.lineB) || rA.lineC.intersectsWithLine(rB.lineC) || rA.lineC.intersectsWithLine(rB.lineD)) {
				return true;
			}
			if(rA.lineD.intersectsWithLine(rB.lineA) || rA.lineD.intersectsWithLine(rB.lineB) || rA.lineD.intersectsWithLine(rB.lineC) || rA.lineD.intersectsWithLine(rB.lineD)) {
				return true;
			}
			return false;
		}
	}
	,__class__: engine_base_geometry_Rectangle
};
var engine_seidh_SeidhGameEngine = $hx_exports["engine"]["seidh"]["SeidhGameEngine"] = function(engineMode,winCondition) {
	if(winCondition == null) {
		winCondition = 2;
	}
	this.mobsSpawnPoints = [];
	this.playersSpawnPoints = [new engine_base_geometry_Point(2500,2500)];
	this.lineColliders = [];
	this.playerExpGained = new haxe_ds_StringMap();
	this.playerTokensAccquired = new haxe_ds_StringMap();
	this.playerZombieKills = new haxe_ds_StringMap();
	this.mobSpawnDelayMs = 0.500;
	this.mobsLastSpawnTime = 0.0;
	this.mobsKilled = 0;
	this.mobsSpawned = 0;
	this.allowSpawnMobs = false;
	this.mobsMax = 200;
	this.timePassed = 0.0;
	this.framesPassed = 0;
	this.lastDt = 0.0;
	engine_base_core_BaseEngine.call(this,engineMode);
	this.winCondition = winCondition;
	this.addLineCollider(0,0,engine_seidh_SeidhGameEngine.GameWorldSize,0);
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(0,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(200,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(400,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(600,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(800,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1000,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1200,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1400,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1600,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1800,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2000,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2200,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2400,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2600,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2800,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3000,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3200,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3400,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3600,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3800,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4000,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4200,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4400,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4600,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4800,-200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5000,-200));
	this.addLineCollider(0,engine_seidh_SeidhGameEngine.GameWorldSize,engine_seidh_SeidhGameEngine.GameWorldSize,engine_seidh_SeidhGameEngine.GameWorldSize);
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(0,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(200,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(400,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(600,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(800,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1000,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1200,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1400,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1600,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(1800,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2000,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2200,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2400,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2600,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(2800,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3000,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3200,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3400,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3600,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(3800,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4000,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4200,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4400,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4600,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(4800,5200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5000,5200));
	this.addLineCollider(0,0,0,engine_seidh_SeidhGameEngine.GameWorldSize);
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,0));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,1000));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,1200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,1400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,1600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,1800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,2000));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,2200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,2400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,2600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,2800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,3000));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,3200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,3400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,3600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,3800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,4000));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,4200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,4400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,4600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,4800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(-200,5000));
	this.addLineCollider(engine_seidh_SeidhGameEngine.GameWorldSize,0,engine_seidh_SeidhGameEngine.GameWorldSize,engine_seidh_SeidhGameEngine.GameWorldSize);
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,0));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,1000));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,1200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,1400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,1600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,1800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,2000));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,2200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,2400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,2600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,2800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,3000));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,3200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,3400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,3600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,3800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,4000));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,4200));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,4400));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,4600));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,4800));
	this.mobsSpawnPoints.push(new engine_base_geometry_Point(5200,5000));
};
engine_seidh_SeidhGameEngine.__name__ = true;
engine_seidh_SeidhGameEngine.main = function() {
};
engine_seidh_SeidhGameEngine.__super__ = engine_base_core_BaseEngine;
engine_seidh_SeidhGameEngine.prototype = $extend(engine_base_core_BaseEngine.prototype,{
	createCharacterEntityFromMinimalStruct: function(struct) {
		this.createCharacterEntity(engine_seidh_entity_factory_SeidhEntityFactory.InitiateCharacter(struct.id,struct.ownerId,struct.x,struct.y,struct.entityType));
	}
	,createCharacterEntityFromFullStruct: function(struct) {
		this.createCharacterEntity(engine_seidh_entity_factory_SeidhEntityFactory.InitiateCharacterFromFullStruct(struct));
	}
	,processInputCommands: function(playerInputCommands) {
		var _g = 0;
		while(_g < playerInputCommands.length) {
			var i = playerInputCommands[_g];
			++_g;
			var input = js_Boot.__cast(i.playerInputCommand , engine_base_PlayerInputCommand);
			var inputInitiator = input.userId;
			var entityId = this.playerToEntityMap.h[inputInitiator];
			var entity = js_Boot.__cast(this.characterEntityManager.getEntityById(entityId) , engine_seidh_entity_base_SeidhBaseEntity);
			if(entity == null || entity.getOwnerId() != inputInitiator) {
				continue;
			}
			this.validatedInputCommands.push(input);
			if(input.actionType == 1) {
				entity.performMove(input);
			} else {
				entity.setNextActionToPerform(input.actionType);
			}
		}
	}
	,engineLoopUpdate: function(dt) {
		this.lastDt = dt;
		if(this.gameState == 1) {
			var beginTime = Date.now();
			this.framesPassed++;
			this.timePassed += dt;
			var characterActionCallbackParams = [];
			var jsIterator = this.projectileEntityManager.entities.values();
			var _g_jsIterator = jsIterator;
			var _g_lastStep = jsIterator.next();
			while(!_g_lastStep.done) {
				var v = _g_lastStep.value;
				_g_lastStep = _g_jsIterator.next();
				var e = v;
				var projectile = js_Boot.__cast(e , engine_base_entity_impl_EngineProjectileEntity);
				if(projectile.allowMovement) {
					projectile.update(dt);
				} else {
					this.deleteProjectileEntity(projectile.getId());
				}
			}
			var allowServerLogic = this.engineMode == 3 || this.engineMode == 1;
			if(allowServerLogic) {
				var jsIterator = this.characterEntityManager.entities.values();
				var _g_jsIterator = jsIterator;
				var _g_lastStep = jsIterator.next();
				while(!_g_lastStep.done) {
					var v = _g_lastStep.value;
					_g_lastStep = _g_jsIterator.next();
					var e1 = v;
					var character1 = js_Boot.__cast(e1 , engine_base_entity_impl_EngineCharacterEntity);
					if(character1.isAlive && !character1.isPlayer()) {
						if(engine_base_EngineConfig.AI_ENABLED) {
							var targetPlayer = this.getNearestPlayer(character1);
							if(targetPlayer != null && character1.getTargetObject() != targetPlayer) {
								character1.setTargetObject(targetPlayer,true);
							} else {
								character1.clearTargetObject();
							}
						}
						var jsIterator = this.characterEntityManager.entities.values();
						var _g_jsIterator1 = jsIterator;
						var _g_lastStep1 = jsIterator.next();
						while(!_g_lastStep1.done) {
							var v1 = _g_lastStep1.value;
							_g_lastStep1 = _g_jsIterator1.next();
							var e2 = v1;
							var character2 = js_Boot.__cast(e2 , engine_base_entity_impl_EngineCharacterEntity);
							if(!character1.intersectsWithCharacter && character1.getId() != character2.getId() && character2.isAlive && !character2.isPlayer()) {
								if(character2.getBodyRectangle().intersectsWithLine(character1.botForwardLookingLine)) {
									character1.intersectsWithCharacter = true;
									character1.canMove = false;
								}
							}
						}
						character1.intersectsWithCharacter = false;
						character1.canMove = true;
					}
				}
			}
			var jsIterator = this.characterEntityManager.entities.values();
			var _g_jsIterator = jsIterator;
			var _g_lastStep = jsIterator.next();
			while(!_g_lastStep.done) {
				var v = _g_lastStep.value;
				_g_lastStep = _g_jsIterator.next();
				var e = v;
				var character1 = js_Boot.__cast(e , engine_base_entity_impl_EngineCharacterEntity);
				var character1Id = character1.getId();
				var character1OwnerId = character1.getOwnerId();
				if(character1.isAlive) {
					character1.update(dt);
					if(character1.isPlayer()) {
						var jsIterator = this.consumableEntityManager.entities.values();
						var _g_jsIterator1 = jsIterator;
						var _g_lastStep1 = jsIterator.next();
						while(!_g_lastStep1.done) {
							var v1 = _g_lastStep1.value;
							_g_lastStep1 = _g_jsIterator1.next();
							var c = v1;
							var consumable = js_Boot.__cast(c , engine_base_entity_impl_EngineConsumableEntity);
							var _this = character1.getBodyRectangle().getCenter();
							var p = consumable.getBodyRectangle().getCenter();
							var dx = _this.x - p.x;
							var dy = _this.y - p.y;
							if(Math.sqrt(dx * dx + dy * dy) < 150) {
								if(character1.getBodyRectangle().containsRect(consumable.getBodyRectangle())) {
									if(consumable.getEntityType() == 90) {
										var currentBalance = this.playerTokensAccquired.h[character1OwnerId];
										if(currentBalance != null) {
											this.playerTokensAccquired.h[character1OwnerId] = currentBalance + 1;
										} else {
											this.playerTokensAccquired.h[character1OwnerId] = 1;
										}
									} else {
										character1.addHealth(consumable.amount);
									}
									this.deleteConsumableEntity(consumable.getId(),character1Id);
								}
							}
						}
						var intersectsWithLine = false;
						var _g = 0;
						var _g1 = this.lineColliders;
						while(_g < _g1.length) {
							var line = _g1[_g];
							++_g;
							if(character1.getForwardLookingLine(character1.playerForwardLookingLineLength).intersectsWithLine(line)) {
								intersectsWithLine = true;
								break;
							}
						}
						if(intersectsWithLine) {
							character1.canMove = false;
						} else {
							character1.canMove = true;
						}
					}
					var jsIterator1 = this.projectileEntityManager.entities.values();
					var _g_jsIterator2 = jsIterator1;
					var _g_lastStep2 = jsIterator1.next();
					while(!_g_lastStep2.done) {
						var v2 = _g_lastStep2.value;
						_g_lastStep2 = _g_jsIterator2.next();
						var e1 = v2;
						var projectile = js_Boot.__cast(e1 , engine_base_entity_impl_EngineProjectileEntity);
						if(projectile.getOwnerId() != character1OwnerId) {
							var projectileRect = projectile.getBodyRectangle();
							var characterRect = character1.getBodyRectangle();
							var _this1 = projectileRect.getCenter();
							var p1 = characterRect.getCenter();
							var dx1 = _this1.x - p1.x;
							var dy1 = _this1.y - p1.y;
							if(Math.sqrt(dx1 * dx1 + dy1 * dy1) < characterRect.w) {
								projectile.allowMovement = false;
							}
						}
					}
					if(character1.isActing) {
						var hurtEntities = [];
						var deadEntities = [];
						var actionShape = null;
						if(character1.actionToPerform.projectileStruct != null) {
							this.createProjectileEntity(this.createProjectileByCharacter(character1));
							actionShape = character1.actionToPerform.projectileStruct.shape;
						} else if(character1.actionToPerform.meleeStruct != null) {
							actionShape = character1.actionToPerform.meleeStruct.shape;
						}
						var jsIterator2 = this.characterEntityManager.entities.values();
						var _g_jsIterator3 = jsIterator2;
						var _g_lastStep3 = jsIterator2.next();
						while(!_g_lastStep3.done) {
							var v3 = _g_lastStep3.value;
							_g_lastStep3 = _g_jsIterator3.next();
							var e2 = v3;
							var character2 = js_Boot.__cast(e2 , engine_base_entity_impl_EngineCharacterEntity);
							if(character2.isAlive && character1Id != character2.getId()) {
								var characterHasActionRect = character1.getCurrentActionRect() != null;
								var chatacterHitsAnother = character1.getCurrentActionRect().containsRect(character2.getBodyRectangle());
								var skipBotToBotAttack = character1.isBot() && character2.isBot();
								if(characterHasActionRect && chatacterHitsAnother && !skipBotToBotAttack) {
									if(allowServerLogic) {
										var health = character2.subtractHealth(character1.actionToPerform.damage);
										if(health == 0) {
											if(character2.isBot()) {
												this.mobsKilled++;
												this.mobsSpawned--;
												var currentKills = this.playerZombieKills.h[character1OwnerId];
												if(currentKills != null) {
													this.playerZombieKills.h[character1OwnerId] = currentKills + 1;
												} else {
													this.playerZombieKills.h[character1OwnerId] = 1;
												}
												var currentExp = this.playerExpGained.h[character1OwnerId];
												if(currentExp != null) {
													this.playerExpGained.h[character1OwnerId] = currentExp + 1;
												} else {
													this.playerExpGained.h[character1OwnerId] = 1;
												}
												this.createConsumable(character2);
											}
											character2.isAlive = false;
											deadEntities.push(character2.getId());
											this.deleteCharacterEntity(character2.getId());
										} else {
											hurtEntities.push(character2.getId());
										}
									} else {
										hurtEntities.push(character2.getId());
									}
								}
							}
						}
						characterActionCallbackParams.push({ entityId : character1.getId(), actionType : character1.actionToPerform.actionType, shape : actionShape, hurtEntities : hurtEntities, deadEntities : deadEntities});
					}
					character1.isActing = false;
					character1.actionToPerform = null;
					character1.isRunning = false;
					character1.isWalking = false;
				}
			}
			if(this.characterActionCallbacks != null && characterActionCallbackParams.length > 0) {
				this.characterActionCallbacks(characterActionCallbackParams);
			}
			if(this.winCondition != 2) {
				if(this.winCondition == 1 && this.mobsKilled == this.mobsMax && allowServerLogic) {
					this.gameState = 2;
					if(this.gameStateCallback != null) {
						this.gameStateCallback(this.gameState);
					}
				}
			}
			this.recentEngineLoopTime = Date.now() - beginTime;
			this.spawnMobs();
		} else if(this.gameState == 3) {
			this.lose();
		}
	}
	,customDestroy: function() {
		this.characterActionCallbacks = null;
	}
	,addLineCollider: function(x1,y1,x2,y2) {
		this.lineColliders.push(new engine_base_geometry_Line(x1,y1,x2,y2));
	}
	,allowMobsSpawn: function(allowSpawnMobs) {
		this.allowSpawnMobs = allowSpawnMobs;
	}
	,spawnMobs: function() {
		var now = HxOverrides.now() / 1000;
		if(this.allowSpawnMobs && this.mobsSpawned < this.mobsMax && (this.mobsLastSpawnTime == 0 || this.mobsLastSpawnTime + this.mobSpawnDelayMs < now)) {
			this.mobsSpawned++;
			this.mobsLastSpawnTime = now;
			var mobSpawnPoint = this.mobsSpawnPoints[engine_base_MathUtils.randomIntInRange(0,this.mobsSpawnPoints.length - 1)];
			var positionX = mobSpawnPoint.x | 0;
			var positionY = mobSpawnPoint.y | 0;
			this.createCharacterEntity(engine_seidh_entity_factory_SeidhEntityFactory.InitiateCharacter(null,null,positionX,positionY,engine_base_MathUtils.randomIntInRange(1,2) == 1 ? 3 : 4));
		}
	}
	,cleanAllMobs: function() {
		var _g = 0;
		var _g1 = this.characterEntityManager.getEntitiesByEntityType(3);
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			this.characterEntityManager.delete(entity.getId());
		}
		var _g = 0;
		var _g1 = this.characterEntityManager.getEntitiesByEntityType(4);
		while(_g < _g1.length) {
			var entity = _g1[_g];
			++_g;
			this.characterEntityManager.delete(entity.getId());
		}
		this.mobsSpawned = 0;
	}
	,getPlayerGainings: function(playerId) {
		return { kills : Object.prototype.hasOwnProperty.call(this.playerZombieKills.h,playerId) ? this.playerZombieKills.h[playerId] : 0, tokens : Object.prototype.hasOwnProperty.call(this.playerTokensAccquired.h,playerId) ? this.playerTokensAccquired.h[playerId] : 0, exp : Object.prototype.hasOwnProperty.call(this.playerExpGained.h,playerId) ? this.playerExpGained.h[playerId] : 0};
	}
	,clearPlayerGainings: function(playerId) {
		var _this = this.playerZombieKills;
		if(Object.prototype.hasOwnProperty.call(_this.h,playerId)) {
			delete(_this.h[playerId]);
		}
		var _this = this.playerTokensAccquired;
		if(Object.prototype.hasOwnProperty.call(_this.h,playerId)) {
			delete(_this.h[playerId]);
		}
		var _this = this.playerExpGained;
		if(Object.prototype.hasOwnProperty.call(_this.h,playerId)) {
			delete(_this.h[playerId]);
		}
	}
	,lose: function() {
		if(this.gameState == 3) {
			if(this.gameStateCallback != null) {
				this.gameStateCallback(this.gameState);
			}
			this.gameState = 4;
		}
	}
	,createProjectileByCharacter: function(character) {
		return null;
	}
	,getNearestPlayer: function(entity) {
		var nearestPlayer = null;
		var nearestPlayerDistance = 0.0;
		var jsIterator = this.characterEntityManager.entities.values();
		var _g_jsIterator = jsIterator;
		var _g_lastStep = jsIterator.next();
		while(!_g_lastStep.done) {
			var v = _g_lastStep.value;
			_g_lastStep = _g_jsIterator.next();
			var targetEntity = v;
			if(targetEntity.isPlayer()) {
				var _this = entity.getBodyRectangle().getCenter();
				var p = targetEntity.getBodyRectangle().getCenter();
				var dx = _this.x - p.x;
				var dy = _this.y - p.y;
				var dist = Math.sqrt(dx * dx + dy * dy);
				if(nearestPlayer == null || dist < nearestPlayerDistance) {
					nearestPlayer = targetEntity;
					nearestPlayerDistance = dist;
				}
			}
		}
		return nearestPlayer;
	}
	,createConsumable: function(character) {
		var x = character.getBodyRectangle().x | 0;
		var y = character.getBodyRectangle().y | 0;
		var rnd = engine_base_MathUtils.randomIntInRange(1,40);
		if(rnd == 1) {
			this.createConsumableEntity(engine_seidh_entity_factory_SeidhEntityFactory.InitiateCoin(null,x,y,25));
		} else if(rnd < 6) {
			this.createConsumableEntity(engine_seidh_entity_factory_SeidhEntityFactory.InitiateHealthPotion(null,x,y,10));
		} else {
			this.createConsumableEntity(engine_seidh_entity_factory_SeidhEntityFactory.InitiateCoin(null,x,y,1));
		}
	}
	,getLastDt: function() {
		return this.lastDt;
	}
	,getGameState: function() {
		return this.gameState;
	}
	,getLineColliders: function() {
		return this.lineColliders;
	}
	,getPlayersSpawnPoints: function() {
		return this.playersSpawnPoints;
	}
	,getMobsSpawnPoints: function() {
		return this.mobsSpawnPoints;
	}
	,getMobsMax: function() {
		return this.mobsMax;
	}
	,getPlayersCount: function() {
		return this.characterEntityManager.getEntitiesByEntityType(1).length + this.characterEntityManager.getEntitiesByEntityType(2).length;
	}
	,getMobsCount: function() {
		return this.characterEntityManager.getEntitiesByEntityType(3).length + this.characterEntityManager.getEntitiesByEntityType(4).length;
	}
	,getWinCondition: function() {
		return this.winCondition;
	}
	,setZombieDamage: function(damage) {
		engine_seidh_SeidhGameEngine.ZOMBIE_DAMAGE = damage;
	}
	,setGameState: function(gameState) {
		this.gameState = gameState;
		if(this.gameStateCallback != null) {
			this.gameStateCallback(gameState);
		}
	}
	,setMobsMax: function(mobsMax) {
		this.mobsMax = mobsMax;
	}
	,setWinCondition: function(winCondition) {
		this.winCondition = winCondition;
	}
	,__class__: engine_seidh_SeidhGameEngine
});
var engine_seidh_entity_base_SeidhBaseEntity = function(characterEntity) {
	engine_base_entity_impl_EngineCharacterEntity.call(this,characterEntity);
};
engine_seidh_entity_base_SeidhBaseEntity.__name__ = true;
engine_seidh_entity_base_SeidhBaseEntity.__super__ = engine_base_entity_impl_EngineCharacterEntity;
engine_seidh_entity_base_SeidhBaseEntity.prototype = $extend(engine_base_entity_impl_EngineCharacterEntity.prototype,{
	performMove: function(playerInput) {
		this.setRotation(playerInput.movAngle);
		this.determenisticMove();
	}
	,canPerformMove: function() {
		return true;
	}
	,canPerformAction: function(characterActionType) {
		return true;
	}
	,updateHashImpl: function() {
		var e = this.baseEntity;
		var c = this.characterEntity;
		var s = e.id + e.x + e.y + c.health;
		return engine_base_EngineUtils.HashString(s);
	}
	,__class__: engine_seidh_entity_base_SeidhBaseEntity
});
var engine_seidh_entity_factory_SeidhEntityFactory = function() { };
engine_seidh_entity_factory_SeidhEntityFactory.__name__ = true;
engine_seidh_entity_factory_SeidhEntityFactory.InitiateCharacter = function(id,ownerId,x,y,entityType) {
	var entity = null;
	switch(entityType) {
	case 1:
		entity = new engine_seidh_entity_impl_RagnarLohEntity(engine_seidh_entity_impl_RagnarLohEntity.GenerateObjectEntity(id,ownerId,x,y));
		break;
	case 2:
		entity = new engine_seidh_entity_impl_RagnarNormEntity(engine_seidh_entity_impl_RagnarNormEntity.GenerateObjectEntity(id,ownerId,x,y));
		break;
	case 3:
		entity = new engine_seidh_entity_impl_ZombieBoyEntity(engine_seidh_entity_impl_ZombieBoyEntity.GenerateObjectEntity(id,ownerId,x,y));
		break;
	case 4:
		entity = new engine_seidh_entity_impl_ZombieGirlEntity(engine_seidh_entity_impl_ZombieGirlEntity.GenerateObjectEntity(id,ownerId,x,y));
		break;
	default:
	}
	return entity;
};
engine_seidh_entity_factory_SeidhEntityFactory.InitiateCharacterFromFullStruct = function(struct) {
	var entity = null;
	var _g = struct.base.entityType;
	if(_g != null) {
		switch(_g) {
		case 1:
			entity = new engine_seidh_entity_impl_RagnarLohEntity(new engine_base_CharacterEntity(struct));
			break;
		case 2:
			entity = new engine_seidh_entity_impl_RagnarNormEntity(new engine_base_CharacterEntity(struct));
			break;
		case 3:
			entity = new engine_seidh_entity_impl_ZombieBoyEntity(new engine_base_CharacterEntity(struct));
			break;
		case 4:
			entity = new engine_seidh_entity_impl_ZombieGirlEntity(new engine_base_CharacterEntity(struct));
			break;
		default:
		}
	}
	return entity;
};
engine_seidh_entity_factory_SeidhEntityFactory.InitiateCoin = function(id,x,y,amount) {
	return new engine_base_entity_impl_EngineConsumableEntity(new engine_base_BaseEntity({ id : id, x : x, y : y, entityType : 90, entityShape : { width : 50, height : 50, rectOffsetX : 0, rectOffsetY : 0}}),amount);
};
engine_seidh_entity_factory_SeidhEntityFactory.InitiateHealthPotion = function(id,x,y,amount) {
	return new engine_base_entity_impl_EngineConsumableEntity(new engine_base_BaseEntity({ id : id, x : x, y : y, entityType : 91, entityShape : { width : 40, height : 60, rectOffsetX : 0, rectOffsetY : 0}}),amount);
};
engine_seidh_entity_factory_SeidhEntityFactory.InitiateLosos = function(id,x,y,amount) {
	return new engine_base_entity_impl_EngineConsumableEntity(new engine_base_BaseEntity({ id : id, x : x, y : y, entityType : 92, entityShape : { width : 80, height : 65, rectOffsetX : 0, rectOffsetY : 0}}),amount);
};
engine_seidh_entity_factory_SeidhEntityFactory.InitiateProjectile = function() {
};
var engine_seidh_entity_impl_RagnarLohEntity = function(characterEntity) {
	engine_seidh_entity_base_SeidhBaseEntity.call(this,characterEntity);
};
engine_seidh_entity_impl_RagnarLohEntity.__name__ = true;
engine_seidh_entity_impl_RagnarLohEntity.GenerateObjectEntity = function(id,ownerId,x,y) {
	return new engine_base_CharacterEntity({ base : { x : x, y : y, entityType : 1, entityShape : { width : 180, height : 260, rectOffsetX : 0, rectOffsetY : 0}, id : id, ownerId : ownerId, rotation : 0}, health : 100, movement : { canWalk : true, canRun : false, runSpeed : 40, movementDelay : 0.100, vitality : 100, vitalityConsumptionPerSec : 20, vitalityRegenPerSec : 10}, actionMain : { actionType : 2, damage : 5, inputDelay : 1, meleeStruct : { aoe : true, shape : { width : 500, height : 400, rectOffsetX : 0, rectOffsetY : 0}}}, action1 : { actionType : 3, damage : 5, inputDelay : 1, projectileStruct : { aoe : false, penetration : false, speed : 200, travelDistance : 900, projectiles : 1, shape : { width : 30, height : 10, rectOffsetX : 0, rectOffsetY : 0}}}, action2 : { actionType : 4, damage : 5, inputDelay : 1, projectileStruct : { aoe : true, penetration : false, speed : 10, travelDistance : 200, projectiles : 1, aoeShape : { width : 100, height : 100, rectOffsetX : 0, rectOffsetY : 0}, shape : { width : 25, height : 25, rectOffsetX : 0, rectOffsetY : 0}}}, action3 : { actionType : 5, damage : 0, inputDelay : 3, meleeStruct : { aoe : true, shape : { width : 100, height : 100, rectOffsetX : 0, rectOffsetY : 0}}}});
};
engine_seidh_entity_impl_RagnarLohEntity.__super__ = engine_seidh_entity_base_SeidhBaseEntity;
engine_seidh_entity_impl_RagnarLohEntity.prototype = $extend(engine_seidh_entity_base_SeidhBaseEntity.prototype,{
	__class__: engine_seidh_entity_impl_RagnarLohEntity
});
var engine_seidh_entity_impl_RagnarNormEntity = function(characterEntity) {
	engine_seidh_entity_base_SeidhBaseEntity.call(this,characterEntity);
};
engine_seidh_entity_impl_RagnarNormEntity.__name__ = true;
engine_seidh_entity_impl_RagnarNormEntity.GenerateObjectEntity = function(id,ownerId,x,y) {
	return new engine_base_CharacterEntity({ base : { x : x, y : y, entityType : 2, entityShape : { width : 180, height : 260, rectOffsetX : 0, rectOffsetY : 0}, id : id, ownerId : ownerId, rotation : 0}, health : 100, movement : { canWalk : true, canRun : false, runSpeed : 40, movementDelay : 0.100, vitality : 100, vitalityConsumptionPerSec : 20, vitalityRegenPerSec : 10}, actionMain : { actionType : 2, damage : 5, inputDelay : 1, meleeStruct : { aoe : true, shape : { width : 500, height : 400, rectOffsetX : 0, rectOffsetY : 0}}}, action1 : { actionType : 3, damage : 5, inputDelay : 1, projectileStruct : { aoe : false, penetration : false, speed : 200, travelDistance : 900, projectiles : 1, shape : { width : 30, height : 10, rectOffsetX : 0, rectOffsetY : 0}}}, action2 : { actionType : 4, damage : 5, inputDelay : 1, projectileStruct : { aoe : true, penetration : false, speed : 10, travelDistance : 200, projectiles : 1, aoeShape : { width : 100, height : 100, rectOffsetX : 0, rectOffsetY : 0}, shape : { width : 25, height : 25, rectOffsetX : 0, rectOffsetY : 0}}}, action3 : { actionType : 5, damage : 0, inputDelay : 3, meleeStruct : { aoe : true, shape : { width : 100, height : 100, rectOffsetX : 0, rectOffsetY : 0}}}});
};
engine_seidh_entity_impl_RagnarNormEntity.__super__ = engine_seidh_entity_base_SeidhBaseEntity;
engine_seidh_entity_impl_RagnarNormEntity.prototype = $extend(engine_seidh_entity_base_SeidhBaseEntity.prototype,{
	__class__: engine_seidh_entity_impl_RagnarNormEntity
});
var engine_seidh_entity_impl_ZombieBoyEntity = function(characterEntity) {
	engine_seidh_entity_base_SeidhBaseEntity.call(this,characterEntity);
};
engine_seidh_entity_impl_ZombieBoyEntity.__name__ = true;
engine_seidh_entity_impl_ZombieBoyEntity.GenerateObjectEntity = function(id,ownerId,x,y) {
	var tmp = 60 + engine_base_MathUtils.randomIntInRange(10,60);
	return new engine_base_CharacterEntity({ base : { x : x, y : y, entityType : 3, entityShape : { width : 200, height : 260, rectOffsetX : 0, rectOffsetY : 0}, id : id, ownerId : ownerId, rotation : 0}, health : 10, movement : { canWalk : true, canRun : true, runSpeed : tmp, movementDelay : 0.100, vitality : 100, vitalityConsumptionPerSec : 20, vitalityRegenPerSec : 10}, actionMain : { actionType : 2, damage : engine_seidh_SeidhGameEngine.ZOMBIE_DAMAGE, inputDelay : 1, meleeStruct : { aoe : false, shape : { width : 300, height : 400, rectOffsetX : 0, rectOffsetY : 0}}}});
};
engine_seidh_entity_impl_ZombieBoyEntity.__super__ = engine_seidh_entity_base_SeidhBaseEntity;
engine_seidh_entity_impl_ZombieBoyEntity.prototype = $extend(engine_seidh_entity_base_SeidhBaseEntity.prototype,{
	__class__: engine_seidh_entity_impl_ZombieBoyEntity
});
var engine_seidh_entity_impl_ZombieGirlEntity = function(characterEntity) {
	engine_seidh_entity_base_SeidhBaseEntity.call(this,characterEntity);
};
engine_seidh_entity_impl_ZombieGirlEntity.__name__ = true;
engine_seidh_entity_impl_ZombieGirlEntity.GenerateObjectEntity = function(id,ownerId,x,y) {
	var tmp = 60 + engine_base_MathUtils.randomIntInRange(10,50);
	return new engine_base_CharacterEntity({ base : { x : x, y : y, entityType : 4, entityShape : { width : 200, height : 260, rectOffsetX : 0, rectOffsetY : 0}, id : id, ownerId : ownerId, rotation : 0}, health : 10, movement : { canWalk : true, canRun : true, runSpeed : tmp, movementDelay : 0.100, vitality : 100, vitalityConsumptionPerSec : 20, vitalityRegenPerSec : 10}, actionMain : { actionType : 2, damage : engine_seidh_SeidhGameEngine.ZOMBIE_DAMAGE, inputDelay : 1, meleeStruct : { aoe : false, shape : { width : 300, height : 380, rectOffsetX : 0, rectOffsetY : 0}}}});
};
engine_seidh_entity_impl_ZombieGirlEntity.__super__ = engine_seidh_entity_base_SeidhBaseEntity;
engine_seidh_entity_impl_ZombieGirlEntity.prototype = $extend(engine_seidh_entity_base_SeidhBaseEntity.prototype,{
	__class__: engine_seidh_entity_impl_ZombieGirlEntity
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.__isInterface__ = true;
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe_Int64 = {};
haxe_Int64.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw haxe_Exception.thrown("divide by zero");
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high = ~divisor.high;
		var low = ~divisor.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high,low);
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe_Int32.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe_Int32.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		divisor = b == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b) : new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
		var b1 = 1;
		b1 &= 63;
		mask = b1 == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1) : new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b_high = 0;
		var b_low = 0;
		if(!(mask.high != b_high || mask.low != b_low)) {
			break;
		}
		var v = haxe_Int32.ucompare(modulus.high,divisor.high);
		if((v != 0 ? v : haxe_Int32.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high = modulus.high - divisor.high | 0;
			var low = modulus.low - divisor.low | 0;
			if(haxe_Int32.ucompare(modulus.low,divisor.low) < 0) {
				var ret = high--;
				high = high | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high,low);
		}
		var b = 1;
		b &= 63;
		mask = b == 0 ? new haxe__$Int64__$_$_$Int64(mask.high,mask.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(mask.high >>> b,mask.high << 32 - b | mask.low >>> b) : new haxe__$Int64__$_$_$Int64(0,mask.high >>> b - 32);
		var b1 = 1;
		b1 &= 63;
		divisor = b1 == 0 ? new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low) : b1 < 32 ? new haxe__$Int64__$_$_$Int64(divisor.high >>> b1,divisor.high << 32 - b1 | divisor.low >>> b1) : new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b1 - 32);
	}
	if(divSign) {
		var high = ~quotient.high;
		var low = ~quotient.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high,low);
	}
	if(dividend.high < 0) {
		var high = ~modulus.high;
		var low = ~modulus.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = true;
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
haxe_Int64Helper.__name__ = true;
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw haxe_Exception.thrown("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw haxe_Exception.thrown("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw haxe_Exception.thrown("Conversion underflow");
	}
	var result = new haxe__$Int64__$_$_$Int64(0,0);
	var neg = noFractions < 0;
	var rest = neg ? -noFractions : noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var a_high = 0;
			var a_low = 1;
			var b = i;
			b &= 63;
			var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(a_high,a_low) : b < 32 ? new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b) : new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe_Int32.ucompare(low,result.low) < 0) {
				var ret = high++;
				high = high | 0;
			}
			result = new haxe__$Int64__$_$_$Int64(high,low);
		}
		++i;
	}
	if(neg) {
		var high = ~result.high;
		var low = ~result.low + 1 | 0;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		result = new haxe__$Int64__$_$_$Int64(high,low);
	}
	return result;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_crypto_Md5 = function() {
};
haxe_crypto_Md5.__name__ = true;
haxe_crypto_Md5.make = function(b) {
	var h = new haxe_crypto_Md5().doEncode(haxe_crypto_Md5.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(16));
	var p = 0;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >>> 24;
	return out;
};
haxe_crypto_Md5.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	while(i < b.length) {
		blks[i >> 2] |= b.b[i] << (((b.length << 3) + i & 3) << 3);
		++i;
	}
	blks[i >> 2] |= 128 << (b.length * 8 + i) % 4 * 8;
	var l = b.length * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_crypto_Sha1 = function() {
};
haxe_crypto_Sha1.__name__ = true;
haxe_crypto_Sha1.make = function(b) {
	var h = new haxe_crypto_Sha1().doEncode(haxe_crypto_Sha1.bytes2blks(b));
	var out = new haxe_io_Bytes(new ArrayBuffer(20));
	var p = 0;
	out.b[p++] = h[0] >>> 24;
	out.b[p++] = h[0] >> 16 & 255;
	out.b[p++] = h[0] >> 8 & 255;
	out.b[p++] = h[0] & 255;
	out.b[p++] = h[1] >>> 24;
	out.b[p++] = h[1] >> 16 & 255;
	out.b[p++] = h[1] >> 8 & 255;
	out.b[p++] = h[1] & 255;
	out.b[p++] = h[2] >>> 24;
	out.b[p++] = h[2] >> 16 & 255;
	out.b[p++] = h[2] >> 8 & 255;
	out.b[p++] = h[2] & 255;
	out.b[p++] = h[3] >>> 24;
	out.b[p++] = h[3] >> 16 & 255;
	out.b[p++] = h[3] >> 8 & 255;
	out.b[p++] = h[3] & 255;
	out.b[p++] = h[4] >>> 24;
	out.b[p++] = h[4] >> 16 & 255;
	out.b[p++] = h[4] >> 8 & 255;
	out.b[p++] = h[4] & 255;
	return out;
};
haxe_crypto_Sha1.bytes2blks = function(b) {
	var nblk = (b.length + 8 >> 6) + 1;
	var blks = [];
	var _g = 0;
	var _g1 = nblk * 16;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var _g = 0;
	var _g1 = b.length;
	while(_g < _g1) {
		var i = _g++;
		var p = i >> 2;
		blks[p] |= b.b[i] << 24 - ((i & 3) << 3);
	}
	var i = b.length;
	var p = i >> 2;
	blks[p] |= 128 << 24 - ((i & 3) << 3);
	blks[nblk * 16 - 1] = b.length * 8;
	return blks;
};
haxe_crypto_Sha1.prototype = {
	doEncode: function(x) {
		var w = [];
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var e = -1009589776;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			var olde = e;
			var j = 0;
			while(j < 80) {
				if(j < 16) {
					w[j] = x[i + j];
				} else {
					var num = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];
					w[j] = num << 1 | num >>> 31;
				}
				var t = (a << 5 | a >>> 27) + this.ft(j,b,c,d) + e + w[j] + this.kt(j);
				e = d;
				d = c;
				c = b << 30 | b >>> 2;
				b = a;
				a = t;
				++j;
			}
			a += olda;
			b += oldb;
			c += oldc;
			d += oldd;
			e += olde;
			i += 16;
		}
		return [a,b,c,d,e];
	}
	,ft: function(t,b,c,d) {
		if(t < 20) {
			return b & c | ~b & d;
		}
		if(t < 40) {
			return b ^ c ^ d;
		}
		if(t < 60) {
			return b & c | b & d | c & d;
		}
		return b ^ c ^ d;
	}
	,kt: function(t) {
		if(t < 20) {
			return 1518500249;
		}
		if(t < 40) {
			return 1859775393;
		}
		if(t < 60) {
			return -1894007588;
		}
		return -899497514;
	}
	,__class__: haxe_crypto_Sha1
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofHex = function(s) {
	if((s.length & 1) != 0) {
		throw haxe_Exception.thrown("Not a hex string (odd number of digits)");
	}
	var a = [];
	var i = 0;
	var len = s.length >> 1;
	while(i < len) {
		var high = s.charCodeAt(i * 2);
		var low = s.charCodeAt(i * 2 + 1);
		high = (high & 15) + ((high & 64) >> 6) * 9;
		low = (low & 15) + ((low & 64) >> 6) * 9;
		a.push((high << 4 | low) & 255);
		++i;
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	toHex: function() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) {
			var i = _g++;
			var c = this.b[i];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var uuid_Uuid = function() { };
uuid_Uuid.__name__ = true;
uuid_Uuid.splitmix64_seed = function(index) {
	var b_high = -1640531527;
	var b_low = 2135587861;
	var high = index.high + b_high | 0;
	var low = index.low + b_low | 0;
	if(haxe_Int32.ucompare(low,index.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var result = new haxe__$Int64__$_$_$Int64(high,low);
	var b = 30;
	b &= 63;
	var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(result.high,result.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(result.high >> b,result.high << 32 - b | result.low >>> b) : new haxe__$Int64__$_$_$Int64(result.high >> 31,result.high >> b - 32);
	var a_high = result.high ^ b1.high;
	var a_low = result.low ^ b1.low;
	var b_high = -1084733587;
	var b_low = 484763065;
	var mask = 65535;
	var al = a_low & mask;
	var ah = a_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a_low,b_high) + haxe_Int32._mul(a_high,b_low) | 0) | 0;
	result = new haxe__$Int64__$_$_$Int64(high,low);
	var b = 27;
	b &= 63;
	var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(result.high,result.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(result.high >> b,result.high << 32 - b | result.low >>> b) : new haxe__$Int64__$_$_$Int64(result.high >> 31,result.high >> b - 32);
	var a_high = result.high ^ b1.high;
	var a_low = result.low ^ b1.low;
	var b_high = -1798288965;
	var b_low = 321982955;
	var mask = 65535;
	var al = a_low & mask;
	var ah = a_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a_low,b_high) + haxe_Int32._mul(a_high,b_low) | 0) | 0;
	result = new haxe__$Int64__$_$_$Int64(high,low);
	var b = 31;
	b &= 63;
	var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(result.high,result.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(result.high >> b,result.high << 32 - b | result.low >>> b) : new haxe__$Int64__$_$_$Int64(result.high >> 31,result.high >> b - 32);
	return new haxe__$Int64__$_$_$Int64(result.high ^ b1.high,result.low ^ b1.low);
};
uuid_Uuid.randomFromRange = function(min,max) {
	var s1 = uuid_Uuid.state0;
	var s0 = uuid_Uuid.state1;
	uuid_Uuid.state0 = s0;
	var b = 23;
	b &= 63;
	var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(s1.high,s1.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(s1.high << b | s1.low >>> 32 - b,s1.low << b) : new haxe__$Int64__$_$_$Int64(s1.low << b - 32,0);
	s1 = new haxe__$Int64__$_$_$Int64(s1.high ^ b1.high,s1.low ^ b1.low);
	var a_high = s1.high ^ s0.high;
	var a_low = s1.low ^ s0.low;
	var b = 18;
	b &= 63;
	var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(s1.high,s1.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(s1.high >>> b,s1.high << 32 - b | s1.low >>> b) : new haxe__$Int64__$_$_$Int64(0,s1.high >>> b - 32);
	var a_high1 = a_high ^ b1.high;
	var a_low1 = a_low ^ b1.low;
	var b = 5;
	b &= 63;
	var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(s0.high,s0.low) : b < 32 ? new haxe__$Int64__$_$_$Int64(s0.high >>> b,s0.high << 32 - b | s0.low >>> b) : new haxe__$Int64__$_$_$Int64(0,s0.high >>> b - 32);
	uuid_Uuid.state1 = new haxe__$Int64__$_$_$Int64(a_high1 ^ b1.high,a_low1 ^ b1.low);
	var a = uuid_Uuid.state1;
	var high = a.high + s0.high | 0;
	var low = a.low + s0.low | 0;
	if(haxe_Int32.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var x = max - min + 1;
	var result = haxe_Int64.divMod(new haxe__$Int64__$_$_$Int64(high,low),new haxe__$Int64__$_$_$Int64(x >> 31,x)).modulus.low;
	if(result < 0) {
		result = -result;
	}
	return result + min;
};
uuid_Uuid.randomByte = function() {
	return uuid_Uuid.randomFromRange(0,255);
};
uuid_Uuid.fromShort = function(shortUuid,separator,fromAlphabet) {
	if(fromAlphabet == null) {
		fromAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
	}
	if(separator == null) {
		separator = "-";
	}
	var uuid = uuid_Uuid.convert(shortUuid,fromAlphabet,"0123456789abcdef");
	return uuid_Uuid.hexToUuid(uuid,separator);
};
uuid_Uuid.toShort = function(uuid,separator,toAlphabet) {
	if(toAlphabet == null) {
		toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
	}
	if(separator == null) {
		separator = "-";
	}
	uuid = StringTools.replace(uuid,separator,"").toLowerCase();
	return uuid_Uuid.convert(uuid,"0123456789abcdef",toAlphabet);
};
uuid_Uuid.fromNano = function(nanoUuid,separator,fromAlphabet) {
	if(fromAlphabet == null) {
		fromAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	}
	if(separator == null) {
		separator = "-";
	}
	var uuid = uuid_Uuid.convert(nanoUuid,fromAlphabet,"0123456789abcdef");
	return uuid_Uuid.hexToUuid(uuid,separator);
};
uuid_Uuid.toNano = function(uuid,separator,toAlphabet) {
	if(toAlphabet == null) {
		toAlphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	}
	if(separator == null) {
		separator = "-";
	}
	uuid = StringTools.replace(uuid,separator,"").toLowerCase();
	return uuid_Uuid.convert(uuid,"0123456789abcdef",toAlphabet);
};
uuid_Uuid.v1 = function(node,optClockSequence,msecs,optNsecs,randomFunc,separator,shortUuid,toAlphabet) {
	if(toAlphabet == null) {
		toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
	}
	if(shortUuid == null) {
		shortUuid = false;
	}
	if(separator == null) {
		separator = "-";
	}
	if(optNsecs == null) {
		optNsecs = -1;
	}
	if(msecs == null) {
		msecs = -1;
	}
	if(optClockSequence == null) {
		optClockSequence = -1;
	}
	if(randomFunc == null) {
		randomFunc = uuid_Uuid.randomByte;
	}
	var buffer = new haxe_io_Bytes(new ArrayBuffer(16));
	if(node == null) {
		node = new haxe_io_Bytes(new ArrayBuffer(6));
		var v = randomFunc();
		node.b[0] = v;
		var v = randomFunc();
		node.b[1] = v;
		var v = randomFunc();
		node.b[2] = v;
		var v = randomFunc();
		node.b[3] = v;
		var v = randomFunc();
		node.b[4] = v;
		var v = randomFunc();
		node.b[5] = v;
		node.b[0] |= 1;
	}
	if(uuid_Uuid.clockSequenceBuffer == -1) {
		uuid_Uuid.clockSequenceBuffer = (randomFunc() << 8 | randomFunc()) & 16383;
	}
	var clockSeq = optClockSequence;
	if(optClockSequence == -1) {
		clockSeq = uuid_Uuid.clockSequenceBuffer;
	}
	if(msecs == -1) {
		msecs = Math.round(Date.now());
	}
	var nsecs = optNsecs;
	if(optNsecs == -1) {
		nsecs = uuid_Uuid.lastNSecs + 1;
	}
	var dt = msecs - uuid_Uuid.lastMSecs + (nsecs - uuid_Uuid.lastNSecs) / 10000;
	if(dt < 0 && optClockSequence == -1) {
		clockSeq = clockSeq + 1 & 16383;
	}
	if((dt < 0 || msecs > uuid_Uuid.lastMSecs) && optNsecs == -1) {
		nsecs = 0;
	}
	if(nsecs >= 10000) {
		throw haxe_Exception.thrown("Can't create more than 10M uuids/sec");
	}
	uuid_Uuid.lastMSecs = msecs;
	uuid_Uuid.lastNSecs = nsecs;
	uuid_Uuid.clockSequenceBuffer = clockSeq;
	msecs += 12219292800000;
	var imsecs = haxe_Int64Helper.fromFloat(msecs);
	var b_high = 0;
	var b_low = 268435455;
	var a_high = imsecs.high & b_high;
	var a_low = imsecs.low & b_low;
	var b_high = 0;
	var b_low = 10000;
	var mask = 65535;
	var al = a_low & mask;
	var ah = a_low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a_low,b_high) + haxe_Int32._mul(a_high,b_low) | 0) | 0;
	var a_high = high;
	var a_low = low;
	var b_high = nsecs >> 31;
	var b_low = nsecs;
	var high = a_high + b_high | 0;
	var low = a_low + b_low | 0;
	if(haxe_Int32.ucompare(low,a_low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var tl = haxe_Int64.divMod(new haxe__$Int64__$_$_$Int64(high,low),uuid_Uuid.DVS).modulus.low;
	buffer.b[0] = tl >>> 24 & 255;
	buffer.b[1] = tl >>> 16 & 255;
	buffer.b[2] = tl >>> 8 & 255;
	buffer.b[3] = tl & 255;
	var a = haxe_Int64.divMod(imsecs,uuid_Uuid.DVS).quotient;
	var b_high = 0;
	var b_low = 10000;
	var mask = 65535;
	var al = a.low & mask;
	var ah = a.low >>> 16;
	var bl = b_low & mask;
	var bh = b_low >>> 16;
	var p00 = haxe_Int32._mul(al,bl);
	var p10 = haxe_Int32._mul(ah,bl);
	var p01 = haxe_Int32._mul(al,bh);
	var p11 = haxe_Int32._mul(ah,bh);
	var low = p00;
	var high = (p11 + (p01 >>> 16) | 0) + (p10 >>> 16) | 0;
	p01 <<= 16;
	low = low + p01 | 0;
	if(haxe_Int32.ucompare(low,p01) < 0) {
		var ret = high++;
		high = high | 0;
	}
	p10 <<= 16;
	low = low + p10 | 0;
	if(haxe_Int32.ucompare(low,p10) < 0) {
		var ret = high++;
		high = high | 0;
	}
	high = high + (haxe_Int32._mul(a.low,b_high) + haxe_Int32._mul(a.high,b_low) | 0) | 0;
	var a_high = high;
	var a_low = low;
	var b_high = 0;
	var b_low = 268435455;
	var this_high = a_high & b_high;
	var this_low = a_low & b_low;
	var tmh = this_low;
	buffer.b[4] = tmh >>> 8 & 255;
	buffer.b[5] = tmh & 255;
	buffer.b[6] = tmh >>> 24 & 15 | 16;
	buffer.b[7] = tmh >>> 16 & 255;
	buffer.b[8] = clockSeq >>> 8 | 128;
	buffer.b[9] = clockSeq & 255;
	buffer.b[10] = node.b[0];
	buffer.b[11] = node.b[1];
	buffer.b[12] = node.b[2];
	buffer.b[13] = node.b[3];
	buffer.b[14] = node.b[4];
	buffer.b[15] = node.b[5];
	var uuid = uuid_Uuid.stringify(buffer,separator);
	if(shortUuid) {
		uuid = uuid_Uuid.toShort(uuid,separator,toAlphabet);
	}
	return uuid;
};
uuid_Uuid.v3 = function(name,namespace,separator,shortUuid,toAlphabet) {
	if(toAlphabet == null) {
		toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
	}
	if(shortUuid == null) {
		shortUuid = false;
	}
	if(separator == null) {
		separator = "-";
	}
	if(namespace == null) {
		namespace = "";
	}
	namespace = StringTools.replace(namespace,"-","");
	var buffer = haxe_crypto_Md5.make(haxe_io_Bytes.ofHex(namespace + haxe_io_Bytes.ofString(name).toHex()));
	buffer.b[6] = buffer.b[6] & 15 | 48;
	buffer.b[8] = buffer.b[8] & 63 | 128;
	var uuid = uuid_Uuid.stringify(buffer,separator);
	if(shortUuid) {
		uuid = uuid_Uuid.toShort(uuid,separator,toAlphabet);
	}
	return uuid;
};
uuid_Uuid.v4 = function(randBytes,randomFunc,separator,shortUuid,toAlphabet) {
	if(toAlphabet == null) {
		toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
	}
	if(shortUuid == null) {
		shortUuid = false;
	}
	if(separator == null) {
		separator = "-";
	}
	if(randomFunc == null) {
		randomFunc = uuid_Uuid.randomByte;
	}
	var buffer = randBytes;
	if(buffer == null) {
		buffer = new haxe_io_Bytes(new ArrayBuffer(16));
		var v = randomFunc();
		buffer.b[0] = v;
		var v = randomFunc();
		buffer.b[1] = v;
		var v = randomFunc();
		buffer.b[2] = v;
		var v = randomFunc();
		buffer.b[3] = v;
		var v = randomFunc();
		buffer.b[4] = v;
		var v = randomFunc();
		buffer.b[5] = v;
		var v = randomFunc();
		buffer.b[6] = v;
		var v = randomFunc();
		buffer.b[7] = v;
		var v = randomFunc();
		buffer.b[8] = v;
		var v = randomFunc();
		buffer.b[9] = v;
		var v = randomFunc();
		buffer.b[10] = v;
		var v = randomFunc();
		buffer.b[11] = v;
		var v = randomFunc();
		buffer.b[12] = v;
		var v = randomFunc();
		buffer.b[13] = v;
		var v = randomFunc();
		buffer.b[14] = v;
		var v = randomFunc();
		buffer.b[15] = v;
	} else if(buffer.length < 16) {
		throw haxe_Exception.thrown("Random bytes should be at least 16 bytes");
	}
	buffer.b[6] = buffer.b[6] & 15 | 64;
	buffer.b[8] = buffer.b[8] & 63 | 128;
	var uuid = uuid_Uuid.stringify(buffer,separator);
	if(shortUuid) {
		uuid = uuid_Uuid.toShort(uuid,separator,toAlphabet);
	}
	return uuid;
};
uuid_Uuid.v5 = function(name,namespace,separator,shortUuid,toAlphabet) {
	if(toAlphabet == null) {
		toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
	}
	if(shortUuid == null) {
		shortUuid = false;
	}
	if(separator == null) {
		separator = "-";
	}
	if(namespace == null) {
		namespace = "";
	}
	namespace = StringTools.replace(namespace,"-","");
	var buffer = haxe_crypto_Sha1.make(haxe_io_Bytes.ofHex(namespace + haxe_io_Bytes.ofString(name).toHex()));
	buffer.b[6] = buffer.b[6] & 15 | 80;
	buffer.b[8] = buffer.b[8] & 63 | 128;
	var uuid = uuid_Uuid.stringify(buffer,separator);
	if(shortUuid) {
		uuid = uuid_Uuid.toShort(uuid,separator,toAlphabet);
	}
	return uuid;
};
uuid_Uuid.stringify = function(data,separator) {
	if(separator == null) {
		separator = "-";
	}
	return uuid_Uuid.hexToUuid(data.toHex(),separator);
};
uuid_Uuid.parse = function(uuid,separator) {
	if(separator == null) {
		separator = "-";
	}
	return haxe_io_Bytes.ofHex(StringTools.replace(uuid,separator,""));
};
uuid_Uuid.validate = function(uuid,separator) {
	if(separator == null) {
		separator = "-";
	}
	if(separator == "") {
		uuid = HxOverrides.substr(uuid,0,8) + "-" + HxOverrides.substr(uuid,8,4) + "-" + HxOverrides.substr(uuid,12,4) + "-" + HxOverrides.substr(uuid,16,4) + "-" + HxOverrides.substr(uuid,20,12);
	} else if(separator != "-") {
		uuid = StringTools.replace(uuid,separator,"-");
	}
	return uuid_Uuid.regexp.match(uuid);
};
uuid_Uuid.version = function(uuid,separator) {
	if(separator == null) {
		separator = "-";
	}
	uuid = StringTools.replace(uuid,separator,"");
	return Std.parseInt("0x" + HxOverrides.substr(uuid,12,1));
};
uuid_Uuid.hexToUuid = function(hex,separator) {
	return HxOverrides.substr(hex,0,8) + separator + HxOverrides.substr(hex,8,4) + separator + HxOverrides.substr(hex,12,4) + separator + HxOverrides.substr(hex,16,4) + separator + HxOverrides.substr(hex,20,12);
};
uuid_Uuid.convert = function(number,fromAlphabet,toAlphabet) {
	var fromBase = fromAlphabet.length;
	var toBase = toAlphabet.length;
	var len = number.length;
	var buf = "";
	var numberMap = new Array(len);
	var divide = 0;
	var newlen = 0;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		numberMap[i] = fromAlphabet.indexOf(number.charAt(i));
	}
	do {
		divide = 0;
		newlen = 0;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			divide = divide * fromBase + numberMap[i];
			if(divide >= toBase) {
				numberMap[newlen++] = Math.floor(divide / toBase);
				divide %= toBase;
			} else if(newlen > 0) {
				numberMap[newlen++] = 0;
			}
		}
		len = newlen;
		buf = toAlphabet.charAt(divide) + buf;
	} while(newlen != 0);
	return buf;
};
uuid_Uuid.nanoId = function(len,alphabet,randomFunc) {
	if(alphabet == null) {
		alphabet = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	}
	if(len == null) {
		len = 21;
	}
	if(randomFunc == null) {
		randomFunc = uuid_Uuid.randomByte;
	}
	if(alphabet == null) {
		throw haxe_Exception.thrown("Alphabet cannot be null");
	}
	if(alphabet.length == 0 || alphabet.length >= 256) {
		throw haxe_Exception.thrown("Alphabet must contain between 1 and 255 symbols");
	}
	if(len <= 0) {
		throw haxe_Exception.thrown("Length must be greater than zero");
	}
	var mask = (2 << Math.floor(Math.log(alphabet.length - 1) / Math.log(2))) - 1;
	var step = Math.ceil(1.6 * mask * len / alphabet.length);
	var sb_b = "";
	while(sb_b.length != len) {
		var _g = 0;
		var _g1 = step;
		while(_g < _g1) {
			var i = _g++;
			var rnd = randomFunc();
			var aIndex = rnd & mask;
			if(aIndex < alphabet.length) {
				sb_b += Std.string(alphabet.charAt(aIndex));
				if(sb_b.length == len) {
					break;
				}
			}
		}
	}
	return sb_b;
};
uuid_Uuid.short = function(toAlphabet,randomFunc) {
	if(toAlphabet == null) {
		toAlphabet = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
	}
	return uuid_Uuid.v4(null,randomFunc,null,true,toAlphabet);
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
String.__name__ = true;
Array.__name__ = true;
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
engine_base_EngineConfig.AI_ENABLED = true;
engine_base_EngineConfig.TARGET_FPS = 20;
engine_seidh_SeidhGameEngine.ZOMBIE_DAMAGE = 10;
engine_seidh_SeidhGameEngine.GameWorldSize = 5000;
haxe_Int32._mul = Math.imul != null ? Math.imul : function(a,b) {
	return a * (b & 65535) + (a * (b >>> 16) << 16 | 0) | 0;
};
uuid_Uuid.DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
uuid_Uuid.URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
uuid_Uuid.ISO_OID = "6ba7b812-9dad-11d1-80b4-00c04fd430c8";
uuid_Uuid.X500_DN = "6ba7b814-9dad-11d1-80b4-00c04fd430c8";
uuid_Uuid.NIL = "00000000-0000-0000-0000-000000000000";
uuid_Uuid.LOWERCASE_BASE26 = "abcdefghijklmnopqrstuvwxyz";
uuid_Uuid.UPPERCASE_BASE26 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
uuid_Uuid.NO_LOOK_ALIKES_BASE51 = "2346789ABCDEFGHJKLMNPQRTUVWXYZabcdefghijkmnpqrtwxyz";
uuid_Uuid.FLICKR_BASE58 = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";
uuid_Uuid.BASE_70 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-+!@#$^";
uuid_Uuid.BASE_85 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#";
uuid_Uuid.COOKIE_BASE90 = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~";
uuid_Uuid.NANO_ID_ALPHABET = "_-0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
uuid_Uuid.NUMBERS_BIN = "01";
uuid_Uuid.NUMBERS_OCT = "01234567";
uuid_Uuid.NUMBERS_DEC = "0123456789";
uuid_Uuid.NUMBERS_HEX = "0123456789abcdef";
uuid_Uuid.lastMSecs = 0;
uuid_Uuid.lastNSecs = 0;
uuid_Uuid.clockSequenceBuffer = -1;
uuid_Uuid.regexp = new EReg("^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$","i");
uuid_Uuid.rndSeed = haxe_Int64Helper.fromFloat(Date.now());
uuid_Uuid.state0 = uuid_Uuid.splitmix64_seed(uuid_Uuid.rndSeed);
uuid_Uuid.state1 = (function($this) {
	var $r;
	var a = uuid_Uuid.rndSeed;
	var x = Std.random(10000);
	var b_high = x >> 31;
	var b_low = x;
	var high = a.high + b_high | 0;
	var low = a.low + b_low | 0;
	if(haxe_Int32.ucompare(low,a.low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	var a_high = high;
	var a_low = low;
	var b_high = 0;
	var b_low = 1;
	var high = a_high + b_high | 0;
	var low = a_low + b_low | 0;
	if(haxe_Int32.ucompare(low,a_low) < 0) {
		var ret = high++;
		high = high | 0;
	}
	$r = uuid_Uuid.splitmix64_seed(new haxe__$Int64__$_$_$Int64(high,low));
	return $r;
}(this));
uuid_Uuid.DVS = new haxe__$Int64__$_$_$Int64(1,0);
engine_seidh_SeidhGameEngine.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
